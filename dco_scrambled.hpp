// dco/c++ version: v3.1.4
// ================================================================ //
// *** This is a generated file from above given source version *** //
// ================================================================ //
#ifndef DCO_HPP
#define DCO_HPP

#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable : 4512 )
#pragma warning( disable : 4503 )
#pragma warning( disable: 4127 )
#endif


// this file is either directly included in dco.hpp or added in front
// of the resulting dco.hpp generated by preprocessor
#ifndef DCO_GLOBAL_INCLUDES
#define DCO_GLOBAL_INCLUDES

#include <sstream>
#include <cmath>
#include <vector>
#include <iostream>
#include <map>
#include <fstream>
#include <complex>
#include <string>
#include <stack>
#include <exception>
#include <stdexcept>
#include <string>
#include <bitset>
#include <cstdarg>
#include <cstdlib>
#include <cstdio>
#include <string.h>

#include <cassert>
#include <limits>
#include <iomanip>

#if !defined(_WIN32) & !defined(__APPLE__)
#include <sys/mman.h>
#include <sys/time.h>
#endif
#if !defined(_WIN32)
#include <unistd.h>
#endif

// for stce::timer
#if !defined(DCO_DOXYGEN) & defined(_WIN32)
#  include <windows.h>
#  undef min
#  undef max
#endif

#include <fcntl.h>
#include <typeinfo>

#ifdef DCO_OPENMP
#  include <omp.h>
#endif

// define all DEPRECATED, to generate compiler-warnings,
// if a marked function is instantiated
// (only implemented for gnu compiler and visual C++)
#ifdef __GNUC__
#define DEPRECATED __attribute__((deprecated))
#elif defined(_MSC_VER)
#define DEPRECATED __declspec(deprecated)
#else
// #pragma message("WARNING: You need to implement DEPRECATED for this compiler")
#define DEPRECATED
#endif
#ifndef DCO_T1V_SIZE
#define DCO_T1V_SIZE 5
#endif

#ifndef DCO_P1F_SIZE
#define DCO_P1F_SIZE 32
#endif
#ifndef DCO_CHUNK_SIZE
#define DCO_CHUNK_SIZE 1024*1024
#endif

#ifndef DCO_DEFAULT_TAPE_SIZE
#define DCO_DEFAULT_TAPE_SIZE 1024*1024*10
#endif

#endif
/**
 * \file
 * Header with dco's configuration definitions. Here the compilation flags will be processed which define how dco shall be compiled (features, constants, environment etc.).
 */

#ifndef DCO_DEFINES_SETUP_HPP
#define DCO_DEFINES_SETUP_HPP

// DCO_NO_DEFS:   if set, not even the basic functionality is included
// DCO_GA1S:      if set, dco::ga1s<...>::type exists (generic a1s)
// DCO_GA1V:      if set, dco::ga1v<...>::type exists (generic a1v)
// DCO_GA1SM:     if set, dco::ga1sm<...>::type exists (generic a1sm)
// DCO_GT1S:      if set, dco::gt1s<...>::type exists (generic t1s)
// DCO_GT1V:      if set, dco::gt1v<...>::type exists (generic t1v)
// DCO_PATTERN:   if set, dco::p1t::type and dco::p1f::type (pattern types)
// DCO_INSTRUMENT:              if set, dco::instrument:type (tape size info, call tree)
// DCO_TAPE_CALLBACKS: if set, tape::tape_callback_object_base (add adjoint wrapper)
// DCO_CHECK_BOUNDS:            if set, check bounds in each operation (esp. for blob tape)
// DCO_TAPE_ACTIVITY:           if set, tape is only written for active variables
// DCO_T1V_ACTIVITY:            if set, tangents are only propagated for active variables
// DCO_ALLOW_TAPE_SWITCH_OFF:   if set, tape->switch_to_passive / active enabled
// DCO_CHUNK_TAPE:              if set, chunk tape instead of blob tape used for adjoints
// DCO_MPI_TAPE:                if set, (NOT AVAILABLE YET)

// tweaks:
// DCO_TIMER:                               if set, dco::timer exists (also set, if DCO_DEBUG set)
// DCO_DISABLE_ASSIGN_OPTIMIZATION:         if set, each assignment in adjoint mode creates a new node in tape
// DCO_ENABLE_INT_OPERATOR:                 if set, there is an operator int() available (be carefull! also conversion from double possible then!)

// ==> DCO_NO_GLOBAL_INCLUDES
// there are two use-cases, where global includes should not exist:
//  - doxygen documentation generation
//  - preprocessor run to generate just one hpp-file
#ifdef DCO_DOXYGEN
#define DCO_NO_GLOBAL_INCLUDES
#endif

#ifdef DCO_TAPE_EXTERNAL_FUNCTIONS
#ifndef DCO_TAPE_CALLBACKS
#define DCO_TAPE_CALLBACKS
#endif
#endif

#ifdef _WIN32
#ifndef _MSC_VER
#define _MSC_VER
#endif
#endif

// ==> if define DCO_LICENSE:
//   - in header, only definition of a few functions (e.g. set/get, _interpret_chunk, ...)
//   - dco_license.cpp needs to be compiled and linked afterwards (.o has the excluded functions)
#ifdef DCO_LICENSE
#define DCO_LICENSE_EXCLUDE_SOURCE
#define DCO_LICENSE_INCLUDE_CHECK
#define DCOi_INLINEDEF
#else
#define DCOi_INLINEDEF inline
#endif

// default configuration for dco (DCO_DEFAULT)
#ifndef DCO_NO_DEFAULT
#define DCO_A1SM
#define DCO_T2S_A1SM
#define DCO_GA1SM
#define DCO_GT1S
#define DCO_GT1V
#define DCO_GA1S
#define DCO_GA1V
#define DCO_PATTERN
#define DCO_INSTRUMENT
#define DCO_TAPE_CALLBACKS
#define DCO_CHECK_BOUNDS
#define DCO_TAPE_ACTIVITY
/**
 * This definition enables the activity analysis for the first-order vector tangent type.
 * The usage of the analysis can lead to a better efficiency if many t1v program variables doesn't depend on any independents.
 * TODO: More detailed explanation...
 */
#define DCO_T1V_ACTIVITY
#define DCO_ALLOW_TAPE_SWITCH_OFF
#define DCO_CHUNK_TAPE
#define DCO_MPI_TAPE
#define DCO_LOGGING
#endif

// Instrumentation required the dco::timer!
#ifdef DCO_INSTRUMENT
# ifndef DCO_TIMER
#  define DCO_TIMER
# endif
#endif

// partially specializes the active_type class for t2s_t1s, t3s_t2s_t1s, ...
//  (workaround for annoying constructor problem -- see ticket #40 in trac)
#ifdef DCO_GT1S
#define DCO_PARTIAL_TEMPLATE_SPECIALIZATION
#endif

#ifndef DCO_TAPE_INT
typedef long int DCO_TAPE_INT;
#endif
//#define DCOi_BASE_TYPE std::complex<double>
#define DCOi_BASE_TYPE double
//#define DCOi_BASE_TYPE float

#ifdef DCO_CHECK_BOUNDS
#define DCO_TAPE_BOUNDS_CHECK
#endif

// this is only default -- in cpp, it is ommited: -DDCO_T1V_SIZE=DCO_T1V_SIZE
#ifndef DCO_T1V_SIZE
#define DCO_T1V_SIZE 5
#endif

// this is only default -- in cpp, it is ommited: -DDCO_P1F_SIZE=DCO_P1F_SIZE
#ifndef DCO_P1F_SIZE
#define DCO_P1F_SIZE 32
#endif

#ifdef DCO_COUNT_MODE
#ifdef DCO_CHUNK_TAPE
#undef DCO_CHUNK_TAPE
#endif
#endif

#ifdef DCO_DEBUG
# ifndef DCO_TAPE_BOUNDS_CHECK
#  define DCO_TAPE_BOUNDS_CHECK
# endif
# ifndef DCO_TIMER
#  define DCO_TIMER
# endif
#endif

#ifdef DCO_CHUNK_TAPE
// this is only default -- in cpp, it is ommited: -DDCO_CHUNK_SIZE=DCO_CHUNK_SIZE
# ifndef DCO_CHUNK_SIZE
#  define DCO_CHUNK_SIZE 1024*1024
# endif
#else
# ifndef DCO_DEFAULT_TAPE_SIZE
#  define DCO_DEFAULT_TAPE_SIZE 1024*1024
# endif
#endif

#ifdef DCO_T1V_ACTIVITY
//! The activity analysis (see \link DCO_T1V_ACTIVITY \endlink) is enabled per default.
#define DCOi_T1V_ACTIVITY_ANALYSIS_DEFAULT true
#else
#define DCOi_T1V_ACTIVITY_ANALYSIS_DEFAULT false
#endif


// in case no std-includes wanted (preprocessing or doxygen), certain
// defines are forced to be preserved (e.g. DCO_T1V_SIZE; see file)
#ifdef DCO_NO_GLOBAL_INCLUDES
#include "dco_preserve_defines.hpp"
#endif

#ifndef DCO_DEBUG
# define CHECK_OVERFLOW(x, a)
#else
# define CHECK_OVERFLOW(x, a) assert(x < static_cast<DCO_TAPE_INT>(std::numeric_limits<DCO_TAPE_INT>::max()-a))
#endif

#ifndef DCO_LOGGING
# ifdef FILELOG_MAX_LEVEL
#  undef FILELOG_MAX_LEVEL
# endif
# define FILELOG_MAX_LEVEL -1
#else
# ifndef DCO_TIMER
#  define DCO_TIMER
# endif
# ifndef FILELOG_MAX_LEVEL
#  define FILELOG_MAX_LEVEL dco::logDEBUG4
# endif
#endif

#endif
// included in dco_logging.hpp or in dco.hpp directly
namespace dco {

  inline std::string NowTime();

  enum log_level_enum {logERROR, logWARNING, logINFO, logDEBUG, logDEBUG1, logDEBUG2, logDEBUG3, logDEBUG4};

  template <typename LOGGER_STREAM>
  class log {
    std::string _file;
    int _line;
  public:
    log(std::string file, int line) : _file(file), _line(line) {}
    log() : _file(""), _line(-1) {}
    ~log() {
      if (_line == -1)
        os << std::endl;
      else
        os << " : " << _file << ":" << _line << std::endl;
      LOGGER_STREAM::output(os.str());
    }

    inline std::ostringstream &operator()(log_level_enum level = logINFO) {
      os << "- " << NowTime();
      os << " " << std::setw(7) << to_string(level) << ": ";
      os << std::string(level > logINFO ? level - logINFO : 0, '\t');
      return os;
    }

  public:
    /**
     * \implstatus10
     * \ingroup logging
     */
    static inline log_level_enum &reporting_level() {
      static log_level_enum reporting_level = logINFO;
      return reporting_level;
    }

    static inline std::string to_string(log_level_enum level) {
      static const char *const buffer[] = {"ERROR", "WARNING", "INFO", "DEBUG", "DEBUG1", "DEBUG2", "DEBUG3", "DEBUG4"};
      return buffer[level];
    }

    static inline log_level_enum from_string(const std::string &level) {
      if (level == "DEBUG4")  return logDEBUG4;
      if (level == "DEBUG3")  return logDEBUG3;
      if (level == "DEBUG2")  return logDEBUG2;
      if (level == "DEBUG1")  return logDEBUG1;
      if (level == "DEBUG")   return logDEBUG;
      if (level == "INFO")    return logINFO;
      if (level == "WARNING") return logWARNING;
      if (level == "ERROR")   return logERROR;
      log<LOGGER_STREAM>()(logWARNING) << "Unknown logging level '" << level << "'. Using INFO level as default.";
      return logINFO;
    }

  protected:
    std::ostringstream os;

  private:
    log(const log &);
    log &operator =(const log &);
  };

  class logger_stream {
  public:
    /**
     * \implstatus10
     * \ingroup logging
     */
    static inline FILE *&stream() {
      static FILE *pStream = fopen("dco.log", "a");
      return pStream;
    }

    static inline void output(const std::string &msg) {
      FILE *pStream = stream();
      if (!pStream)
        return;
      fprintf(pStream, "%s", msg.c_str());
      fflush(pStream);
    }
  };

  typedef  log<logger_stream> logger;

  /**
   * \implstatus10
   * \ingroup logging
   */
#define DCO_LOGL(level)                                                  \
    if (FILELOG_MAX_LEVEL < 0) ;                                        \
    else if (level > FILELOG_MAX_LEVEL) ;                               \
    else if (level > dco::logger::reporting_level() || !dco::logger_stream::stream()) ; \
    else dco::logger(__FILE__, __LINE__)(level)

  /**
   * \implstatus10
   * \ingroup logging
   */
#define DCO_LOG(level)                                                  \
    if (FILELOG_MAX_LEVEL < 0) ;                                        \
    else if (level > FILELOG_MAX_LEVEL) ;                               \
    else if (level > dco::logger::reporting_level() || !dco::logger_stream::stream()) ; \
    else dco::logger()(level)

#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__)

  inline std::string NowTime() {
    const int MAX_LEN = 200;
    char buffer[MAX_LEN];
    if (GetTimeFormatA(LOCALE_USER_DEFAULT, 0, 0,
                       "HH':'mm':'ss", buffer, MAX_LEN) == 0)
      return "Error in NowTime()";

    char result[100] = {0};
    static DWORD first = GetTickCount();
    std::sprintf(result, "%s.%03ld", buffer, static_cast<long>(GetTickCount() - first) % 1000);
    return result;
  }

#else

  inline std::string NowTime() {
    char buffer[11];
    time_t t;
    time(&t);
    tm r;
    strftime(buffer, sizeof(buffer), "%X", localtime_r(&t, &r));
    struct timeval tv;
    gettimeofday(&tv, 0);
    char result[100] = {0};
    std::sprintf(result, "%s.%03ld", buffer, static_cast<long>(tv.tv_usec) / 1000);
    return result;
  }

#endif //WIN32

}

typedef long int DCO_TAPE_INT;
namespace dco {
  namespace stce_9752 {
    template<class stce_9753>struct stce_9754 {
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        return stce_9758._value() + stce_9759._value();
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return 1.0;
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return 1.0;
      }
    };
    template<class stce_9753>struct stce_9762 {
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        return stce_9758._value() - stce_9759._value();
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return 1.0;
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return -1.0;
      }
    };
    template<class stce_9753>struct stce_9763 {
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        return stce_9758._value() * stce_9759._value();
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return stce_9759._value();
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return stce_9758._value();
      }
    };
    template<class stce_9753>struct stce_9764 {
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        return stce_9758._value() / stce_9759._value();
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return 1.0 / stce_9759._value();
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return -_value / stce_9759._value();
      }
    };
    template<class stce_9753>struct stce_9765 {
      template<class stce_9755>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9753 &stce_9759) {
        return stce_9758._value() + stce_9759;
      } template<class stce_9755>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9753 &stce_9759) {
        (void)_value;
        (void)stce_9758;
        (void)stce_9759;
        return 1.0;
      }
    };
    template<class stce_9753>struct stce_9766 {
      template<class stce_9756>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9756 &stce_9759) {
        return stce_9758 + stce_9759._value();
      } template<class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9753 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return 1.0;
      }
    };
    template<class stce_9753>struct stce_9767 {
      template<class stce_9755>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9753 &stce_9759) {
        return stce_9758._value() - stce_9759;
      } template<class stce_9755>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9753 &stce_9759) {
        (void)_value;
        (void)stce_9758;
        (void)stce_9759;
        return 1.0;
      }
    };
    template<class stce_9753>struct stce_9768 {
      template<class stce_9756>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9756 &stce_9759) {
        return stce_9758 - stce_9759._value();
      } template<class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9753 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return -1.0;
      }
    };
    template<class stce_9753>struct stce_9769 {
      template<class stce_9755>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9753 &stce_9759) {
        return stce_9758._value() * stce_9759;
      } template<class stce_9755>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9753 &stce_9759) {
        (void)_value;
        (void)stce_9758;
        (void)stce_9759;
        return stce_9759;
      }
    };
    template<class stce_9753>struct stce_9770 {
      template<class stce_9756>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9756 &stce_9759) {
        return stce_9758 * stce_9759._value();
      } template<class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9753 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return stce_9758;
      }
    };
    template<class stce_9753>struct stce_9771 {
      template<class stce_9755>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9753 &stce_9759) {
        return stce_9758._value() / stce_9759;
      } template<class stce_9755>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9753 &stce_9759) {
        (void)_value;
        (void)stce_9758;
        (void)stce_9759;
        return 1.0 / stce_9759;
      }
    };
    template<class stce_9753>struct stce_9772 {
      template<class stce_9756>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9756 &stce_9759) {
        return stce_9758 / stce_9759._value();
      } template<class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9753 &stce_9758 , const stce_9756 &stce_9759) {
        (void) _value;
        (void)stce_9758;
        (void)stce_9759;
        return -_value / stce_9759._value();
      }
    };
    using std::sin;
    template<class stce_9753>struct stce_9773 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return sin(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (cos(stce_9776._value()));
      }
    };
    using std::cos;
    template<class stce_9753>struct stce_9777 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return cos(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (-sin(stce_9776._value()));
      }
    };
    using std::tan;
    template<class stce_9753>struct stce_9778 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return tan(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return ((1.0 + (tan(stce_9776._value()) * tan(stce_9776._value()))));
      }
    };
    using std::cosh;
    template<class stce_9753>struct stce_9779 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return cosh(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (sinh(stce_9776._value()));
      }
    };
    using std::sinh;
    template<class stce_9753>struct stce_9780 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return sinh(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (cosh(stce_9776._value()));
      }
    };
    using std::asin;
    template<class stce_9753>struct stce_9781 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return asin(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (1 / sqrt(1.0 - stce_9776._value() * stce_9776._value()));
      }
    };
    using std::acos;
    template<class stce_9753>struct stce_9782 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return acos(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (-1 / sqrt(1.0 - stce_9776._value() * stce_9776._value()));
      }
    };
    using std::exp;
    template<class stce_9753>struct stce_9783 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return exp(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (exp(stce_9776._value()));
      }
    };
    using std::atan;
    template<class stce_9753>struct stce_9784 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return atan(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (1.0 / (1.0 + stce_9776._value() * stce_9776._value()));
      }
    };
    using std::tanh;
    template<class stce_9753>struct stce_9785 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return tanh(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (1.0 - tanh(stce_9776._value()) * tanh(stce_9776._value()));
      }
    };
    using std::sqrt;
    template<class stce_9753>struct stce_9786 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return sqrt(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (1.0 / (2.0 * sqrt(stce_9776._value())));
      }
    };
    using std::log;
    template<class stce_9753>struct stce_9787 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return log(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (1.0 / stce_9776._value());
      }
    };
    using ::erf;
    template<class stce_9753>struct stce_9788 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return erf(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (2.0 / sqrt(3.14159265358979323846264338327950288) * exp(-stce_9776._value() * stce_9776._value()));
      }
    };
    using ::erfc;
    template<class stce_9753>struct stce_9789 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return erfc(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (-2.0 / sqrt(3.14159265358979323846264338327950288) * exp(-stce_9776._value() * stce_9776._value()));
      }
    };
    using ::asinh;
    template<class stce_9753>struct stce_9790 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return asinh(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (1. / sqrt(1. + (stce_9776._value() * stce_9776._value())));
      }
    };
    using ::acosh;
    template<class stce_9753>struct stce_9791 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return acosh(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (1. / sqrt((stce_9776._value() * stce_9776._value()) - 1.));
      }
    };
    using ::expm1;
    template<class stce_9753>struct stce_9792 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return expm1(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (exp(stce_9776._value()));
      }
    };
    using ::atanh;
    template<class stce_9753>struct stce_9793 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return atanh(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (1. / (1. - (stce_9776._value() * stce_9776._value())));
      }
    };
    using ::log1p;
    template<class stce_9753>struct stce_9794 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return log1p(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (1.0 / (stce_9776._value() + 1));
      }
    };
    using ::log10;
    template<class stce_9753>struct stce_9795 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) {
        return log10(arg._value());
      } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) {
        (void)_value;
        return (1.0 / (stce_9776._value() * log(10)));
      }
    };
    template<class stce_9753>struct stce_9796 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758) {
        return -stce_9758._value();
      }
      template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9758) {
        (void)_value;
        (void)stce_9758;
        return -1.0;
      }
    };
    template<class stce_9753>struct stce_9797 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758) {
        return stce_9758._value();
      }
      template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9758) {
        (void)_value;
        (void)stce_9758;
        return 1.0;
      }
    };
    using ::fabs;
    template<class stce_9753>struct stce_9798 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758) {
        return fabs(stce_9758._value());
      }
      template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9758) {
        (void) _value;
        if (stce_9758._value() < 0) return -1.0;
        else return 1.0;
      }
    };
    template<class stce_9753>struct stce_9799 {
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        (void) stce_9758;
        (void) stce_9759;
        return atan2(stce_9758._value(), stce_9759._value());
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        (void) _value;
        (void) stce_9758;
        (void) stce_9759;
        return stce_9759._value() / (stce_9759._value() * stce_9759._value() + stce_9758._value() * stce_9758._value());
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        (void) _value;
        (void) stce_9758;
        (void) stce_9759;
        return -stce_9758._value() / (stce_9759._value() * stce_9759._value() + stce_9758._value() * stce_9758._value());
      }
    };
    template<class stce_9753>struct stce_9800 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758, const stce_9753 &stce_9759) {
        (void) stce_9758;
        (void) stce_9759;
        return atan2(stce_9758._value(), stce_9759);
      } template<class stce_9774>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9774 &stce_9758, const stce_9753 &stce_9759) {
        (void) _value;
        (void) stce_9758;
        (void) stce_9759;
        return stce_9759 / (stce_9759 * stce_9759 + stce_9758._value() * stce_9758._value());
      }
    };
    template<class stce_9753>struct stce_9801 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9774 &stce_9759) {
        (void) stce_9758;
        (void) stce_9759;
        return atan2(stce_9758, stce_9759._value());
      } template<class stce_9774>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9753 &stce_9758, const stce_9774 &stce_9759) {
        (void) _value;
        (void) stce_9758;
        (void) stce_9759;
        return -stce_9758 / (stce_9759._value() * stce_9759._value() + stce_9758 * stce_9758);
      }
    };
    template<class stce_9753>
    struct stce_9802 {
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        return pow(stce_9758._value(), stce_9759._value());
      }
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        (void)_value;
        return stce_9759._value() * pow(stce_9758._value(), stce_9759._value() - 1.0);
      }
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        (void) _value;
        if (stce_9758 <= 0)
          return 0;
        else
          return log(stce_9758._value()) * pow(stce_9758._value(), stce_9759._value());
      }
    };
    template<class stce_9753>
    struct stce_9803 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758, const stce_9753 &stce_9759) {
        return pow(stce_9758._value(), stce_9759);
      }
      template<class stce_9774>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9774 &stce_9758, const stce_9753 &stce_9759) {
        (void) _value;
        return stce_9759 * pow(stce_9758._value(), stce_9759 - 1.0);
      }
    };
    template<class stce_9753>
    struct stce_9804 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9774 &stce_9759) {
        return pow(stce_9758, stce_9759._value());
      }
      template<class stce_9774>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9753 &stce_9758, const stce_9774 &stce_9759) {
        (void) _value;
        return log(stce_9758) * pow(stce_9758, stce_9759._value());
      }
    };
    template<class stce_9753>struct stce_9805 {
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        (void) stce_9758;
        (void) stce_9759;
        return hypot(stce_9758._value(), stce_9759._value());
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        (void) _value;
        (void) stce_9758;
        (void) stce_9759;
        return stce_9758._value() / _value;
      } template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        (void) _value;
        (void) stce_9758;
        (void) stce_9759;
        return stce_9759._value() / _value;
      }
    };
    template<class stce_9753>struct stce_9806 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758, const stce_9753 &stce_9759) {
        (void) stce_9758;
        (void) stce_9759;
        return hypot(stce_9758._value(), stce_9759);
      } template<class stce_9774>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9774 &stce_9758, const stce_9753 &stce_9759) {
        (void) _value;
        (void) stce_9758;
        (void) stce_9759;
        return stce_9758._value() / _value;
      }
    };
    template<class stce_9753>struct stce_9807 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9774 &stce_9759) {
        (void) stce_9758;
        (void) stce_9759;
        return hypot(stce_9758, stce_9759._value());
      } template<class stce_9774>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9753 &stce_9758, const stce_9774 &stce_9759) {
        (void) _value;
        (void) stce_9758;
        (void) stce_9759;
        return stce_9759._value() / _value;
      }
    };
  }
}
namespace dco {
  namespace helper {
    template <typename stce_9774>
    struct stce_9808 {
      typedef stce_9774 type;
    };
    template<class stce_9809, const int stce_9810 = DCO_T1V_SIZE>
    struct stce_9811 {
      static const int stce_9812 = stce_9810;
      typedef stce_9809 value_t;
      stce_9809 stce_9813[stce_9810];
      void stce_9814(const stce_9809 &stce_9815) {
        for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
          stce_9813[stce_9816] = stce_9815;
      }
      stce_9811(const stce_9809 &stce_9815) {
        stce_9814(stce_9815);
      }
      stce_9811() {
        stce_9814(0);
      }
      stce_9809 &operator[](const int stce_9817) {
        return stce_9813[stce_9817];
      }
      const stce_9809 &operator[](const int stce_9817) const {
        return stce_9813[stce_9817];
      }
      stce_9811 &operator= (const stce_9809 &stce_9818) {
        for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
          this->stce_9813[stce_9816] = stce_9818;
        return *this;
      }
      stce_9811 &operator += (const stce_9811 &stce_9818) {
        for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
          this->stce_9813[stce_9816] += stce_9818.stce_9813[stce_9816];
        return *this;
      }
    };
    template<class stce_9774>
    struct stce_9819 {
      static const int stce_9820 = 1;
    };
    template<class stce_9809, int stce_9810>
    struct stce_9819< stce_9811<stce_9809, stce_9810> > {
      static const int stce_9820 = stce_9810;
    };
    template<class stce_9809, int stce_9810>
    static inline
    stce_9811<stce_9809, stce_9810>
    operator * (const double &stce_9821, const stce_9811<stce_9809, stce_9810> &stce_9822) {
      stce_9811<stce_9809, stce_9810> stce_9823;
      for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
        stce_9823.stce_9813[stce_9816] = stce_9822.stce_9813[stce_9816] * stce_9821;
      return stce_9823;
    }
    template<class stce_9809, int stce_9810>
    static inline
    stce_9811<stce_9809, stce_9810>
    operator + (const stce_9811<stce_9809, stce_9810> &stce_9824, const stce_9811<stce_9809, stce_9810> &stce_9818) {
      stce_9811<stce_9809, stce_9810> stce_9823;
      for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
        stce_9823.stce_9813[stce_9816] = stce_9824.stce_9813[stce_9816] + stce_9818.stce_9813[stce_9816];
      return stce_9823;
    }
    template<class stce_9809, int stce_9810>
    static inline
    stce_9811<stce_9809, stce_9810>
    operator * (const stce_9811<stce_9809, stce_9810> &stce_9824, const stce_9811<stce_9809, stce_9810> &stce_9818) {
      stce_9811<stce_9809, stce_9810> stce_9823;
      for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
        stce_9823.stce_9813[stce_9816] = stce_9824.stce_9813[stce_9816] * stce_9818.stce_9813[stce_9816];
      return stce_9823;
    }
    template<class stce_9809, int stce_9810>
    static inline
    stce_9811<stce_9809, stce_9810>
    operator * (const stce_9811<stce_9809, stce_9810> &stce_9824, const stce_9809 &stce_9818) {
      stce_9811<stce_9809, stce_9810> stce_9823;
      for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
        stce_9823.stce_9813[stce_9816] = stce_9824.stce_9813[stce_9816] * stce_9818;
      return stce_9823;
    }
    template<class stce_9809, int stce_9810>
    static inline std::ostream &operator << (std::ostream &out, const stce_9811<stce_9809, stce_9810> &stce_9776) {
      out << "(";
      for (int stce_9816 = 0; stce_9816 < stce_9810 - 1; ++stce_9816) {
        out << stce_9776.stce_9813[stce_9816] << ";";
      }
      out << stce_9776.stce_9813[stce_9810 - 1];
      out << ")";
      return out;
    }
  }
}
namespace dco {
  template<typename stce_9825>
  class stce_9826 {
    const stce_9825 &stce_9774;
  public:
    stce_9826(const stce_9825 &stce_9827) : stce_9774(stce_9827) {}
    template <typename stce_9828>
    stce_9828 *create() const {
      return new stce_9828(stce_9774);
    }
  };
  template<>
  class stce_9826<void *> {
  public:
    stce_9826(void *stce_9829) {
      (void) stce_9829;
    }
    template <typename stce_9828>
    stce_9828 *create() const {
      return new stce_9828();
    }
  };
  class stce_9830 {
    std::ofstream stce_9831;
    std::string stce_9832;
    std::string stce_9833;
    std::stringstream stce_9834;
    std::stringstream stce_9835;
  public:
    stce_9830(const std::string &filename) : stce_9832("digraph {\n"), stce_9833("\n}\n") {
      stce_9834.clear();
      stce_9835.clear();
      stce_9831.open(filename.c_str());
    }
    void stce_9836(std::vector<DCO_TAPE_INT> &stce_9837, std::vector<DCO_TAPE_INT> &stce_9838, DCO_TAPE_INT stce_9839) {
      stce_9834 << stce_9839 << "[shape=box,label=\"(" << stce_9839 << ", ext. function)\",color=\"red\"]\n";
      for (std::vector<DCO_TAPE_INT>::iterator stce_9816 = stce_9837.begin(); stce_9816 != stce_9837.end(); ++stce_9816) {
        stce_9835 << *stce_9816 << " -> " << stce_9839 << "[label=\"unknown" << "\",color=\"red\"]\n";
      }
      for (std::vector<DCO_TAPE_INT>::iterator stce_9816 = stce_9838.begin(); stce_9816 != stce_9838.end(); ++stce_9816) {
        stce_9835 << stce_9839 << " -> " << *stce_9816 << "[label=\"unknown" << "\",color=\"red\"]\n";
      }
    }
    void stce_9840(DCO_TAPE_INT stce_9839) {
      stce_9834 << stce_9839 << "[shape=box,label=\"" << stce_9839 << "\", color=\"green\"]\n";
    }
    template <typename stce_9841>
    void stce_9840(DCO_TAPE_INT stce_9839, stce_9841 stce_9842) {
      stce_9834 << stce_9839 << "[shape=box,label=\"(" << stce_9839 << ", " << stce_9842 << ")\", color=\"green\"]\n";
    }
    template <typename stce_9841>
    void stce_9843(DCO_TAPE_INT stce_9844, DCO_TAPE_INT stce_9845, stce_9841 stce_9846) {
      stce_9835 << stce_9844 << " -> " << stce_9845 << "[label=\"" << stce_9846 << "\"]\n";
    }
    ~stce_9830() {
      stce_9831 << stce_9832;
      stce_9831 << stce_9834.str();
      stce_9831 << stce_9835.str();
      stce_9831 << stce_9833;
      stce_9831.close();
    }
  };
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9753, class stce_9848, class stce_9849> struct stce_9850 {
      const stce_9753 stce_9851;
      const stce_9848 &stce_9852;
      typedef stce_9753 VALUE_TYPE;
      typedef typename stce_9848::DATA_TYPE DATA_TYPE;
      stce_9850(const stce_9848 &arg) : stce_9851(stce_9849::stce_9757(arg)), stce_9852(arg) {
      }
      inline const stce_9753 &_value() const {
        return stce_9851;
      }
      inline const stce_9753 pval() const {
        return stce_9849::stce_9775(_value(), stce_9852);
      }
    };
    template<class stce_9753, class stce_9853, class stce_9854, class stce_9849> struct stce_9855 {
      stce_9753 stce_9851;
      const stce_9853 &stce_9856;
      const stce_9854 &stce_9857;
      typedef stce_9753 VALUE_TYPE;
      typedef typename stce_9853::DATA_TYPE DATA_TYPE;
      stce_9855(const stce_9853 &stce_9758, const stce_9854 &stce_9759) :
        stce_9851(stce_9849::stce_9757(stce_9758, stce_9759)),
        stce_9856(stce_9758),
        stce_9857(stce_9759) {
      }
      inline const stce_9753 stce_9858() const {
        return stce_9849::stce_9760(_value(), stce_9856, stce_9857);
      }
      inline const stce_9753 stce_9859() const {
        return stce_9849::stce_9761(_value(), stce_9856, stce_9857);
      }
      inline const stce_9753 &_value() const {
        return stce_9851;
      }
    };
    template<class stce_9753, class stce_9853, class stce_9849> struct stce_9860 {
      const stce_9753 stce_9851;
      const stce_9853 &stce_9856;
      const stce_9753 stce_9857;
      typedef stce_9753 VALUE_TYPE;
      typedef typename stce_9853::DATA_TYPE DATA_TYPE;
      stce_9860(const stce_9853 &stce_9758, const stce_9753 &stce_9759) :
        stce_9851(stce_9849::stce_9757(stce_9758, stce_9759)), stce_9856(stce_9758), stce_9857(stce_9759) {}
      inline const stce_9753 &_value() const {
        return stce_9851;
      }
      inline const stce_9753 stce_9858() const {
        return stce_9849::stce_9760(stce_9851, stce_9856, stce_9857);
      }
    };
    template<class stce_9753, class stce_9854, class stce_9849> struct stce_9861 {
      const stce_9753 stce_9851;
      const stce_9753 stce_9856;
      const stce_9854 &stce_9857;
      typedef stce_9753 VALUE_TYPE;
      typedef typename stce_9854::DATA_TYPE DATA_TYPE;
      stce_9861(const stce_9753 &stce_9758, const stce_9854 &stce_9759) :
        stce_9851(stce_9849::stce_9757(stce_9758, stce_9759)), stce_9856(stce_9758), stce_9857(stce_9759) {}
      inline const stce_9753 &_value() const {
        return stce_9851;
      }
      inline const stce_9753 stce_9859() const {
        return stce_9849::stce_9761(stce_9851, stce_9856, stce_9857);
      }
    };
    template <typename stce_9774>
    struct stce_9862 {
      typedef stce_9774 stce_9825;
    };
    template<class stce_9753, class stce_9863> struct stce_9864 {
    private:
      stce_9753 stce_9851;
      stce_9863 stce_9865;
    public:
      typedef stce_9753 VALUE_TYPE;
      typedef stce_9863 DATA_TYPE;
      typedef typename stce_9862<stce_9753>::stce_9825 stce_9866;
      inline const stce_9753 &_value() const {
        return stce_9851;
      }
      inline stce_9753 &_value() {
        return stce_9851;
      }
      inline const stce_9863 &_data() const {
        return stce_9865;
      }
      inline stce_9863 &_data() {
        return stce_9865;
      }
      inline void _clear() {
        stce_9865.clear();
      }
      inline stce_9864() : stce_9851(static_cast<stce_9753>(0.0)) {}
      template<class stce_9867, class stce_9868>
      inline stce_9864(const stce_9864<stce_9867, stce_9868> &stce_9869) : stce_9851(stce_9869) {}
      inline stce_9864(const stce_9866 &stce_9869) : stce_9851(stce_9869) {}
      inline stce_9864 &operator = (const stce_9864 &stce_9776) {
        this->stce_9851 = stce_9776.stce_9851;
        this->stce_9865 = stce_9776.stce_9865;
        return *this;
      }
      inline stce_9864 &operator =(const stce_9866 &stce_9870) {
        this->stce_9851 = stce_9870;
        this->stce_9865.clear();
        return *this;
      }
      template<class stce_9867, class stce_9868>
      inline stce_9864 &operator =(const stce_9864<stce_9867, stce_9868> &stce_9870) {
        this->stce_9851 = stce_9870;
        this->stce_9865.clear();
        return *this;
      }
    private:
      template<class stce_9871, class stce_9872, class stce_9873 > inline void stce_9874(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
        stce_9863::stce_9875(stce_9776, *this);
        this->stce_9851 = stce_9776.stce_9851;
      } public:
      template<class stce_9871, class stce_9872, class stce_9873 > stce_9864(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
        stce_9874(stce_9776);
      } template<class stce_9871, class stce_9872, class stce_9873 > inline stce_9864 &operator=(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
        stce_9874(stce_9776);
        return *this;
      }
    private:
      template<class stce_9871, class stce_9873 > inline void stce_9874(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
        stce_9863::stce_9875(stce_9776, *this);
        this->stce_9851 = stce_9776.stce_9851;
      } public:
      template<class stce_9871, class stce_9873 > stce_9864(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
        stce_9874(stce_9776);
      } template<class stce_9871, class stce_9873 > inline stce_9864 &operator=(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
        stce_9874(stce_9776);
        return *this;
      }
    private:
      template<class stce_9872, class stce_9873 > inline void stce_9874(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
        stce_9863::stce_9875(stce_9776, *this);
        this->stce_9851 = stce_9776.stce_9851;
      } public:
      template<class stce_9872, class stce_9873 > stce_9864(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
        stce_9874(stce_9776);
      } template<class stce_9872, class stce_9873 > inline stce_9864 &operator=(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
        stce_9874(stce_9776);
        return *this;
      }
    private:
      template<class stce_9876, class stce_9873 > inline void stce_9874(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
        stce_9863::stce_9875(stce_9776, *this);
        this->stce_9851 = stce_9776.stce_9851;
      } public:
      template<class stce_9876, class stce_9873 > stce_9864(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
        stce_9874(stce_9776);
      } template<class stce_9876, class stce_9873 > inline stce_9864 &operator=(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
        stce_9874(stce_9776);
        return *this;
      }
      template<class stce_9868> inline stce_9864 &operator += (const stce_9864<stce_9753, stce_9868> &stce_9776) {
        *this = *this + stce_9776;
        return *this;
      } template<class stce_9871, class stce_9872, class stce_9873 > inline stce_9864 &operator += (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
        *this = *this + stce_9776;
        return *this;
      } template<class stce_9871, class stce_9873 > inline stce_9864 &operator += (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
        *this = *this + stce_9776;
        return *this;
      } template<class stce_9872, class stce_9873 > inline stce_9864 &operator += (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
        *this = *this + stce_9776;
        return *this;
      } template<class stce_9876, class stce_9873 > inline stce_9864 &operator += (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
        *this = *this + stce_9776;
        return *this;
      } inline stce_9864 &operator += (const stce_9753 &stce_9776) {
        this->_value() += stce_9776;
        return *this;
      }
      template<class stce_9868> inline stce_9864 &operator -= (const stce_9864<stce_9753, stce_9868> &stce_9776) {
        *this = *this - stce_9776;
        return *this;
      } template<class stce_9871, class stce_9872, class stce_9873 > inline stce_9864 &operator -= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
        *this = *this - stce_9776;
        return *this;
      } template<class stce_9871, class stce_9873 > inline stce_9864 &operator -= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
        *this = *this - stce_9776;
        return *this;
      } template<class stce_9872, class stce_9873 > inline stce_9864 &operator -= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
        *this = *this - stce_9776;
        return *this;
      } template<class stce_9876, class stce_9873 > inline stce_9864 &operator -= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
        *this = *this - stce_9776;
        return *this;
      } inline stce_9864 &operator -= (const stce_9753 &stce_9776) {
        this->_value() -= stce_9776;
        return *this;
      }
      template<class stce_9868> inline stce_9864 &operator *= (const stce_9864<stce_9753, stce_9868> &stce_9776) {
        *this = *this * stce_9776;
        return *this;
      } template<class stce_9871, class stce_9872, class stce_9873 > inline stce_9864 &operator *= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
        *this = *this * stce_9776;
        return *this;
      } template<class stce_9871, class stce_9873 > inline stce_9864 &operator *= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
        *this = *this * stce_9776;
        return *this;
      } template<class stce_9872, class stce_9873 > inline stce_9864 &operator *= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
        *this = *this * stce_9776;
        return *this;
      } template<class stce_9876, class stce_9873 > inline stce_9864 &operator *= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
        *this = *this * stce_9776;
        return *this;
      } inline stce_9864 &operator *= (const stce_9753 &stce_9776) {
        *this = *this * stce_9776;
        return *this;
      }
      template<class stce_9868> inline stce_9864 &operator /= (const stce_9864<stce_9753, stce_9868> &stce_9776) {
        *this = *this / stce_9776;
        return *this;
      } template<class stce_9871, class stce_9872, class stce_9873 > inline stce_9864 &operator /= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
        *this = *this / stce_9776;
        return *this;
      } template<class stce_9871, class stce_9873 > inline stce_9864 &operator /= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
        *this = *this / stce_9776;
        return *this;
      } template<class stce_9872, class stce_9873 > inline stce_9864 &operator /= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
        *this = *this / stce_9776;
        return *this;
      } template<class stce_9876, class stce_9873 > inline stce_9864 &operator /= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
        *this = *this / stce_9776;
        return *this;
      } inline stce_9864 &operator /= (const stce_9753 &stce_9776) {
        *this = *this / stce_9776;
        return *this;
      }
      inline stce_9864 &operator ++() {
        ++this->stce_9851;
        return *this;
      }
      inline stce_9864 &operator --() {
        --this->stce_9851;
        return *this;
      }
      inline stce_9864 operator ++(int) {
        stce_9864 stce_9823(*this);
        ++this->stce_9851;
        return stce_9823;
      }
      inline stce_9864 operator --(int) {
        stce_9864 stce_9823(*this);
        --this->stce_9851;
        return stce_9823;
      }
    };
    template<class stce_9753, class stce_9863>
    struct stce_9862<stce_9864<stce_9753, stce_9863> > {
      typedef typename stce_9862<stce_9753>::stce_9825 stce_9825;
    };
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9796<stce_9753> > operator -(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9796<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9796<stce_9753> > operator -(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9796<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9796<stce_9753> > operator -(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9796<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9796<stce_9753> > operator -(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9796<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9796<stce_9753> > operator -(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9796<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9797<stce_9753> > operator +(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9797<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9797<stce_9753> > operator +(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9797<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9797<stce_9753> > operator +(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9797<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9797<stce_9753> > operator +(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9797<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9797<stce_9753> > operator +(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9797<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9773<stce_9753> > sin(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9773<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9773<stce_9753> > sin(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9773<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9773<stce_9753> > sin(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9773<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9773<stce_9753> > sin(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9773<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9773<stce_9753> > sin(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9773<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9777<stce_9753> > cos(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9777<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9777<stce_9753> > cos(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9777<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9777<stce_9753> > cos(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9777<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9777<stce_9753> > cos(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9777<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9777<stce_9753> > cos(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9777<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9778<stce_9753> > tan(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9778<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9778<stce_9753> > tan(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9778<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9778<stce_9753> > tan(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9778<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9778<stce_9753> > tan(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9778<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9778<stce_9753> > tan(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9778<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9779<stce_9753> > cosh(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9779<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9779<stce_9753> > cosh(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9779<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9779<stce_9753> > cosh(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9779<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9779<stce_9753> > cosh(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9779<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9779<stce_9753> > cosh(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9779<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9780<stce_9753> > sinh(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9780<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9780<stce_9753> > sinh(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9780<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9780<stce_9753> > sinh(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9780<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9780<stce_9753> > sinh(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9780<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9780<stce_9753> > sinh(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9780<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9781<stce_9753> > asin(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9781<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9781<stce_9753> > asin(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9781<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9781<stce_9753> > asin(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9781<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9781<stce_9753> > asin(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9781<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9781<stce_9753> > asin(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9781<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9782<stce_9753> > acos(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9782<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9782<stce_9753> > acos(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9782<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9782<stce_9753> > acos(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9782<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9782<stce_9753> > acos(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9782<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9782<stce_9753> > acos(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9782<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9783<stce_9753> > exp(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9783<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9783<stce_9753> > exp(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9783<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9783<stce_9753> > exp(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9783<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9783<stce_9753> > exp(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9783<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9783<stce_9753> > exp(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9783<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9784<stce_9753> > atan(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9784<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9784<stce_9753> > atan(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9784<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9784<stce_9753> > atan(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9784<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9784<stce_9753> > atan(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9784<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9784<stce_9753> > atan(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9784<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9785<stce_9753> > tanh(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9785<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9785<stce_9753> > tanh(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9785<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9785<stce_9753> > tanh(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9785<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9785<stce_9753> > tanh(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9785<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9785<stce_9753> > tanh(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9785<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9786<stce_9753> > sqrt(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9786<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9786<stce_9753> > sqrt(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9786<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9786<stce_9753> > sqrt(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9786<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9786<stce_9753> > sqrt(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9786<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9786<stce_9753> > sqrt(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9786<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9787<stce_9753> > log(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9787<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9787<stce_9753> > log(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9787<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9787<stce_9753> > log(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9787<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9787<stce_9753> > log(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9787<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9787<stce_9753> > log(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9787<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9788<stce_9753> > erf(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9788<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9788<stce_9753> > erf(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9788<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9788<stce_9753> > erf(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9788<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9788<stce_9753> > erf(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9788<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9788<stce_9753> > erf(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9788<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9789<stce_9753> > erfc(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9789<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9789<stce_9753> > erfc(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9789<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9789<stce_9753> > erfc(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9789<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9789<stce_9753> > erfc(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9789<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9789<stce_9753> > erfc(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9789<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9792<stce_9753> > expm1(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9792<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9792<stce_9753> > expm1(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9792<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9792<stce_9753> > expm1(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9792<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9792<stce_9753> > expm1(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9792<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9792<stce_9753> > expm1(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9792<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9790<stce_9753> > asinh(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9790<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9790<stce_9753> > asinh(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9790<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9790<stce_9753> > asinh(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9790<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9790<stce_9753> > asinh(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9790<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9790<stce_9753> > asinh(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9790<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9791<stce_9753> > acosh(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9791<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9791<stce_9753> > acosh(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9791<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9791<stce_9753> > acosh(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9791<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9791<stce_9753> > acosh(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9791<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9791<stce_9753> > acosh(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9791<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9793<stce_9753> > atanh(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9793<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9793<stce_9753> > atanh(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9793<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9793<stce_9753> > atanh(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9793<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9793<stce_9753> > atanh(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9793<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9793<stce_9753> > atanh(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9793<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9794<stce_9753> > log1p(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9794<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9794<stce_9753> > log1p(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9794<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9794<stce_9753> > log1p(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9794<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9794<stce_9753> > log1p(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9794<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9794<stce_9753> > log1p(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9794<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9795<stce_9753> > log10(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9795<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9795<stce_9753> > log10(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9795<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9795<stce_9753> > log10(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9795<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9795<stce_9753> > log10(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9795<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9795<stce_9753> > log10(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9795<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9798<stce_9753> > fabs(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9798<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > fabs(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > fabs(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9798<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > fabs(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > fabs(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9798<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9798<stce_9753> > abs(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9798<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > abs(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > abs(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9798<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > abs(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> >(stce_9878);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > abs(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) {
      return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9798<stce_9753> >(stce_9878);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9765<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9765<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9766<stce_9753> > operator + (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9766<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9765<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9765<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9766<stce_9753> > operator + (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9766<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9765<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9765<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9766<stce_9753> > operator + (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9766<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9765<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9765<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9766<stce_9753> > operator + (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9766<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9765<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9765<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9766<stce_9753> > operator + (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9766<stce_9753> >(stce_9878, stce_9879);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9767<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9767<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9768<stce_9753> > operator - (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9768<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9767<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9767<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9768<stce_9753> > operator - (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9768<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9767<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9767<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9768<stce_9753> > operator - (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9768<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9767<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9767<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9768<stce_9753> > operator - (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9768<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9767<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9767<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9768<stce_9753> > operator - (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9768<stce_9753> >(stce_9878, stce_9879);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9769<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9769<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9770<stce_9753> > operator * (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9770<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9769<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9769<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9770<stce_9753> > operator * (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9770<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9769<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9769<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9770<stce_9753> > operator * (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9770<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9769<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9769<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9770<stce_9753> > operator * (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9770<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9769<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9769<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9770<stce_9753> > operator * (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9770<stce_9753> >(stce_9878, stce_9879);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9771<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9771<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9772<stce_9753> > operator / (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9772<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9771<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9771<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9772<stce_9753> > operator / (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9772<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9771<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9771<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9772<stce_9753> > operator / (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9772<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9771<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9771<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9772<stce_9753> > operator / (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9772<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9771<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9771<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9772<stce_9753> > operator / (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9772<stce_9753> >(stce_9878, stce_9879);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9800<stce_9753> > atan2(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9800<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9801<stce_9753> > atan2(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9801<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9800<stce_9753> > atan2(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9800<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9801<stce_9753> > atan2(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9801<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9800<stce_9753> > atan2(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9800<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9801<stce_9753> > atan2(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9801<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9800<stce_9753> > atan2(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9800<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9801<stce_9753> > atan2(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9801<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9800<stce_9753> > atan2(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9800<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9801<stce_9753> > atan2(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9801<stce_9753> >(stce_9878, stce_9879);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9803<stce_9753> > pow(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9803<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9804<stce_9753> > pow(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9804<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9803<stce_9753> > pow(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9803<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9804<stce_9753> > pow(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9804<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9803<stce_9753> > pow(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9803<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9804<stce_9753> > pow(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9804<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9803<stce_9753> > pow(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9803<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9804<stce_9753> > pow(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9804<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9803<stce_9753> > pow(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9803<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9804<stce_9753> > pow(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9804<stce_9753> >(stce_9878, stce_9879);
    }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9806<stce_9753> > hypot(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9806<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9807<stce_9753> > hypot(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9807<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9806<stce_9753> > hypot(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9806<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9807<stce_9753> > hypot(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9807<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9806<stce_9753> > hypot(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9806<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9807<stce_9753> > hypot(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9807<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9806<stce_9753> > hypot(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9806<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9807<stce_9753> > hypot(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9807<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9806<stce_9753> > hypot(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) {
      return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9806<stce_9753> >(stce_9878, stce_9879);
    } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9807<stce_9753> > hypot(const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9807<stce_9753> >(stce_9878, stce_9879);
    }
    template<class stce_9753, class stce_9877 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) ;
    template<class stce_9753, class stce_9877 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() == stce_9879._value();
    } template<class stce_9753, class stce_9877 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879) {
      return stce_9878._value() == stce_9879;
    } template<class stce_9753, class stce_9877 > static inline bool operator == (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator == (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878 == stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() == stce_9879;
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator == (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator == (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return stce_9878 == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() == stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator == (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator == (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 == stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() == stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator == (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator == (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return stce_9878 == stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() == stce_9879;
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator == (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator == (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 == stce_9879._value();
    }
    template<class stce_9753, class stce_9877 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) ;
    template<class stce_9753, class stce_9877 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() != stce_9879._value();
    } template<class stce_9753, class stce_9877 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879) {
      return stce_9878._value() != stce_9879;
    } template<class stce_9753, class stce_9877 > static inline bool operator != (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator != (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878 != stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() != stce_9879;
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator != (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator != (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return stce_9878 != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() != stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator != (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator != (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 != stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() != stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator != (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator != (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return stce_9878 != stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() != stce_9879;
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator != (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator != (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 != stce_9879._value();
    }
    template<class stce_9753, class stce_9877 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) ;
    template<class stce_9753, class stce_9877 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() < stce_9879._value();
    } template<class stce_9753, class stce_9877 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879) {
      return stce_9878._value() < stce_9879;
    } template<class stce_9753, class stce_9877 > static inline bool operator < (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator < (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878 < stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() < stce_9879;
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator < (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator < (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return stce_9878 < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() < stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator < (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator < (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 < stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() < stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator < (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator < (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return stce_9878 < stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() < stce_9879;
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator < (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator < (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 < stce_9879._value();
    }
    template<class stce_9753, class stce_9877 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) ;
    template<class stce_9753, class stce_9877 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() <= stce_9879._value();
    } template<class stce_9753, class stce_9877 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879) {
      return stce_9878._value() <= stce_9879;
    } template<class stce_9753, class stce_9877 > static inline bool operator <= (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator <= (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878 <= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() <= stce_9879;
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator <= (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator <= (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return stce_9878 <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() <= stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator <= (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator <= (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 <= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() <= stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator <= (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator <= (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return stce_9878 <= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() <= stce_9879;
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator <= (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator <= (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 <= stce_9879._value();
    }
    template<class stce_9753, class stce_9877 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) ;
    template<class stce_9753, class stce_9877 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() > stce_9879._value();
    } template<class stce_9753, class stce_9877 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879) {
      return stce_9878._value() > stce_9879;
    } template<class stce_9753, class stce_9877 > static inline bool operator > (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator > (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878 > stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() > stce_9879;
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator > (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator > (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return stce_9878 > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() > stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator > (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator > (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 > stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() > stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator > (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator > (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return stce_9878 > stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() > stce_9879;
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator > (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator > (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 > stce_9879._value();
    }
    template<class stce_9753, class stce_9877 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) ;
    template<class stce_9753, class stce_9877 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) ;
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) {
      return stce_9878._value() >= stce_9879._value();
    } template<class stce_9753, class stce_9877 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const double &stce_9879) {
      return stce_9878._value() >= stce_9879;
    } template<class stce_9753, class stce_9877 > static inline bool operator >= (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879);
    template<class stce_9753, class stce_9877 > static inline bool operator >= (const double &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) {
      return stce_9878 >= stce_9879._value();
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() >= stce_9879;
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator >= (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator >= (const double &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) {
      return stce_9878 >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() >= stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator >= (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator >= (const double &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 >= stce_9879._value();
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() >= stce_9879;
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator >= (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator >= (const double &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) {
      return stce_9878 >= stce_9879._value();
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const double &stce_9879) {
      return stce_9878._value() >= stce_9879;
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator >= (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879);
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator >= (const double &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) {
      return stce_9878 >= stce_9879._value();
    }
    template<class stce_9753, class stce_9877 >
    static inline void stce_9885(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      double stce_9886 = 0;
      get(stce_9776, stce_9886);
      stce_9776 = stce_9886;
    }
    template<class stce_9753, class stce_9877 >
    static inline std::istream &operator >> (std::istream &in, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      stce_9753 &stce_9886 = const_cast<stce_9753 &>(stce_9776._value());
      in >> stce_9886;
      return in;
    }
    using std::ceil;
    using std::floor;
    using std::isfinite;
    using std::isnan;
    using std::isinf;
    template<class stce_9753, class stce_9877 > static inline bool isnan(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      return isnan(stce_9776._value());
    } template<class stce_9753, class stce_9877 > static inline bool isinf(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      return isinf(stce_9776._value());
    } template<class stce_9753, class stce_9877 > static inline double ceil(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      return ceil(stce_9776._value());
    } template<class stce_9753, class stce_9877 > static inline double floor(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      return floor(stce_9776._value());
    } template<class stce_9753, class stce_9877 > static inline bool isfinite(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      return isfinite(stce_9776._value());
    }
    using std::ceil;
    using std::floor;
    using std::isfinite;
    using std::isnan;
    using std::isinf;
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool isnan(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
      return isnan(stce_9776._value());
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool isinf(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
      return isinf(stce_9776._value());
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline double ceil(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
      return ceil(stce_9776._value());
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline double floor(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
      return floor(stce_9776._value());
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool isfinite(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
      return isfinite(stce_9776._value());
    }
    using std::ceil;
    using std::floor;
    using std::isfinite;
    using std::isnan;
    using std::isinf;
    template<class stce_9753, class stce_9871, class stce_9873 > static inline bool isnan(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
      return isnan(stce_9776._value());
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool isinf(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
      return isinf(stce_9776._value());
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline double ceil(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
      return ceil(stce_9776._value());
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline double floor(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
      return floor(stce_9776._value());
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool isfinite(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
      return isfinite(stce_9776._value());
    }
    using std::ceil;
    using std::floor;
    using std::isfinite;
    using std::isnan;
    using std::isinf;
    template<class stce_9753, class stce_9872, class stce_9873 > static inline bool isnan(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
      return isnan(stce_9776._value());
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool isinf(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
      return isinf(stce_9776._value());
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline double ceil(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
      return ceil(stce_9776._value());
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline double floor(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
      return floor(stce_9776._value());
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool isfinite(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
      return isfinite(stce_9776._value());
    }
    using std::ceil;
    using std::floor;
    using std::isfinite;
    using std::isnan;
    using std::isinf;
    template<class stce_9753, class stce_9876, class stce_9873 > static inline bool isnan(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
      return isnan(stce_9776._value());
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool isinf(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
      return isinf(stce_9776._value());
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline double ceil(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
      return ceil(stce_9776._value());
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline double floor(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
      return floor(stce_9776._value());
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool isfinite(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
      return isfinite(stce_9776._value());
    }
    template<class stce_9753, class stce_9877 > static inline std::ostream &operator << (std::ostream &out, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      out << stce_9776._value();
      return out;
    }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline std::ostream &operator << (std::ostream &out, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
      out << stce_9776._value();
      return out;
    }
    template<class stce_9753, class stce_9871, class stce_9873 > static inline std::ostream &operator << (std::ostream &out, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
      out << stce_9776._value();
      return out;
    }
    template<class stce_9753, class stce_9872, class stce_9873 > static inline std::ostream &operator << (std::ostream &out, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
      out << stce_9776._value();
      return out;
    }
    template<class stce_9753, class stce_9876, class stce_9873 > static inline std::ostream &operator << (std::ostream &out, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
      out << stce_9776._value();
      return out;
    }
  }
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9774> struct stce_9887 {
      const static bool stce_9888 = true;
    };
    template<class stce_9753, class stce_9877 > struct stce_9887<dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
      const static bool stce_9888 = false;
    };
    template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9887<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > {
      const static bool stce_9888 = false;
    };
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9887<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > {
      const static bool stce_9888 = false;
    };
    template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9887<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > {
      const static bool stce_9888 = false;
    };
    template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9887<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > {
      const static bool stce_9888 = false;
    };
    template <bool stce_9889, class stce_9890, class stce_9891>
    struct stce_9892 {
      typedef stce_9890 stce_9888;
    };
    template <class stce_9890, class stce_9891>
    struct stce_9892<false, stce_9890, stce_9891> {
      typedef stce_9891 stce_9888;
    };
    template <class stce_9774> struct
        stce_9893 {
      typedef stce_9774 stce_9888;
    };
    template<class stce_9753, class stce_9877 > struct stce_9893<dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
      typedef dco::stce_9847::stce_9864< typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE, typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE> stce_9888;
    };
    template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9893<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > {
      typedef dco::stce_9847::stce_9864< typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE, typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE> stce_9888;
    };
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9893<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > {
      typedef dco::stce_9847::stce_9864< typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE, typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE> stce_9888;
    };
    template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9893<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > {
      typedef dco::stce_9847::stce_9864< typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE, typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE> stce_9888;
    };
    template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9893<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > {
      typedef dco::stce_9847::stce_9864< typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE, typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE> stce_9888;
    };
    template<class stce_9853, class stce_9854>
    struct stce_9894 {
      typedef typename stce_9892<stce_9887<stce_9853>::stce_9888, stce_9853, typename stce_9893<stce_9853>::stce_9888 >::stce_9888 stce_9895;
      typedef typename stce_9892<stce_9887<stce_9854>::stce_9888, stce_9854, typename stce_9893<stce_9854>::stce_9888 >::stce_9888 stce_9896;
      typedef typename stce_9892<stce_9887<stce_9853>::stce_9888, stce_9896, stce_9895>::stce_9888 stce_9897;
      typedef typename stce_9892<stce_9887<stce_9897>::stce_9888, stce_9853, stce_9897>::stce_9888 type;
    };
    template<class stce_9753, class stce_9877 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877> >::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9877 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877> >::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9877 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, stce_9753>::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const stce_9753 &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9877 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, stce_9753>::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const stce_9753 &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9876, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, stce_9753>::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const stce_9753 &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, stce_9753>::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const stce_9753 &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, stce_9753>::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const stce_9753 &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, stce_9753>::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const stce_9753 &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, stce_9753>::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const stce_9753 &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, stce_9753>::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const stce_9753 &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9872, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, stce_9753>::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const stce_9753 &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, stce_9753>::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const stce_9753 &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9877 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877> >::type max(const stce_9753 &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9877 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877> >::type min(const stce_9753 &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9876, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::type max(const stce_9753 &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9876, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::type min(const stce_9753 &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::type max(const stce_9753 &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::type min(const stce_9753 &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9871, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::type max(const stce_9753 &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9871, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::type min(const stce_9753 &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
    template<class stce_9753, class stce_9872, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::type max(const stce_9753 &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9899) {
      if (stce_9898 > stce_9899) return stce_9898;
      else return stce_9899;
    } template<class stce_9753, class stce_9872, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::type min(const stce_9753 &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9899) {
      if (stce_9898 < stce_9899) return stce_9898;
      else return stce_9899;
    }
  }
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9753>
    struct stce_9900 {
      typedef stce_9753 stce_9901;
      stce_9753 stce_9902;
      stce_9900() : stce_9902(0) {}
      stce_9900 &operator = (const stce_9900 &stce_9899) {
        stce_9902 = stce_9899.stce_9902;
        return *this;
      }
      inline void stce_9903(const stce_9753 &stce_9869) {
        stce_9902 = stce_9869;
      }
      inline void stce_9904(stce_9753 &stce_9869) const {
        stce_9869 = stce_9902;
      }
      inline void clear() {
        stce_9902 = 0;
      }
      inline const stce_9753 &stce_9905() const {
        (void) "dcogt1v";
        return stce_9902;
      }
      inline stce_9753 &stce_9905() {
        (void) "dcogt1v";
        return stce_9902;
      }
      template<class stce_9906, class stce_9907>
      static inline void stce_9875(const stce_9906 &stce_9870, stce_9907 &stce_9908) {
        stce_9900 &data = const_cast<stce_9900 &>(stce_9908._data());
        data.stce_9902 = stce_9909(stce_9870, 1.0);
      }
      template<class stce_9877 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, const stce_9753 &pval) {
        return stce_9776._data().stce_9902 * pval;
      }
      template<class stce_9871, class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval) + stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval);
      }
      template<class stce_9876, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, const stce_9753 &pval) {
        return stce_9909(stce_9776.stce_9852, stce_9776.pval() * pval);
      }
      template<class stce_9871, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, const stce_9753 &pval) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval);
      }
      template<class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval) {
        return stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval);
      }
      typedef void stce_9910;
      typedef DCO_TAPE_INT stce_9911;
      inline void *stce_9912() const {
        return NULL;
      }
      inline DCO_TAPE_INT _tape_index() const {
        return 0;
      }
    };
  }
}
namespace dco {
  class exception {
  public:
    template <typename stce_9913> static stce_9913 create(std::string stce_9914, std::string stce_9915 = "", int stce_9916 = 0) {
      std::stringstream stce_9917;
      stce_9917 << "--- dco/c++ --- " << stce_9914;
      if (stce_9915 != "") stce_9917 << " --- " << stce_9915 << ":" << stce_9916 << ".";
      DCO_LOG(dco::logERROR) << "EXCEPTION thrown: " << stce_9917.str();
      return stce_9913(stce_9917.str());
    }
  };
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9753, typename stce_9918>
    struct stce_9919 {
      typedef stce_9918 stce_9901;
      static const int stce_9820 = stce_9901::stce_9812;
      stce_9901 tlms;
      stce_9919() {
        for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) tlms[stce_9816] = 0;
      }
      inline stce_9901 &stce_9905() {
        return tlms;
      }
      inline const stce_9901 &stce_9905() const {
        return tlms;
      }
      inline void stce_9903(const stce_9753 &stce_9869, const int stce_9920) {
        tlms[stce_9920] = stce_9869;
      }
      inline void stce_9904(stce_9753 &stce_9869, const int stce_9920) const {
        stce_9869 = tlms[stce_9920];
      }
      inline void clear() {
        for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) {
          tlms[stce_9816] = 0.0;
        }
      }
      template<class stce_9906, class stce_9907>
      static inline void stce_9875(const stce_9906 &stce_9870, stce_9907 &stce_9908) {
        stce_9919 &data = const_cast<stce_9919 &>(stce_9908._data());
        for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) {
          data.tlms[stce_9816] = stce_9909(stce_9870, 1.0, stce_9816);
        }
      }
      template<class stce_9877 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9776._data().tlms[stce_9920] * pval;
      }
      template<class stce_9871, class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval, stce_9920) + stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval, stce_9920);
      }
      template<class stce_9876, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9852, stce_9776.pval() * pval, stce_9920);
      }
      template<class stce_9871, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval, stce_9920);
      }
      template<class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval, stce_9920);
      }
      typedef void stce_9910;
      typedef DCO_TAPE_INT stce_9911;
      inline void *stce_9912() const {
        return NULL;
      }
      inline DCO_TAPE_INT _tape_index() const {
        return 0;
      }
    };
    template<class stce_9753, typename stce_9918>
    struct stce_9921 {
      typedef stce_9918 stce_9901;
      static const int stce_9820 = stce_9901::stce_9812;
      bool stce_9922;
      stce_9901 tlms;
      stce_9921() : stce_9922(false) {
        for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) tlms[stce_9816] = 0;
      }
      inline void stce_9903(const stce_9753 &stce_9869, const int stce_9920) {
        if (!stce_9922) {
          stce_9922 = true;
        }
        tlms[stce_9920] = stce_9869;
      }
      inline stce_9901 &stce_9905() {
        stce_9922 = true;
        return tlms;
      }
      inline const stce_9901 &stce_9905() const {
        return tlms;
      }
      inline void stce_9904(stce_9753 &stce_9869, const int stce_9920) const {
        if (stce_9922) {
          stce_9869 = tlms[stce_9920];
        } else {
          stce_9869 = 0;
        }
      }
      inline void clear() {
        for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) {
          tlms[stce_9816] = 0.0;
        }
      }
      template<class stce_9906, class stce_9907>
      static inline void stce_9875(const stce_9906 &stce_9870, stce_9907 &stce_9908) {
        stce_9921 &data = const_cast<stce_9921 &>(stce_9908._data());
        bool stce_9923 = stce_9924(stce_9870);
        if (stce_9923) {
          for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) {
            data.tlms[stce_9816] = stce_9909(stce_9870, 1.0, stce_9816);
          }
          data.stce_9922 = true;
        } else
          data.stce_9922 = false;
      }
      template<class stce_9877 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        if (stce_9776._data().stce_9922) {
          return stce_9776._data().tlms[stce_9920] * pval;
        } else
          return 0;
      }
      template<class stce_9871, class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval, stce_9920) + stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval, stce_9920);
      }
      template<class stce_9876, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9852, stce_9776.pval() * pval, stce_9920);
      }
      template<class stce_9871, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval, stce_9920);
      }
      template<class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval, stce_9920);
      }
      template<class stce_9877 >
      static inline bool stce_9924(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
        return stce_9776._data().stce_9922;
      }
      template<class stce_9871, class stce_9872, class stce_9873 >
      static inline bool stce_9924(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
        return stce_9924(stce_9776.stce_9856) || stce_9924(stce_9776.stce_9857);
      }
      template<class stce_9876, class stce_9873 >
      static inline bool stce_9924(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
        return stce_9924(stce_9776.stce_9852);
      }
      template<class stce_9871, class stce_9873 >
      static inline bool stce_9924(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
        return stce_9924(stce_9776.stce_9856);
      }
      template<class stce_9872, class stce_9873 >
      static inline bool stce_9924(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
        return stce_9924(stce_9776.stce_9857);
      }
      typedef void stce_9910;
      typedef DCO_TAPE_INT stce_9911;
      inline void *stce_9912() const {
        return NULL;
      }
      inline DCO_TAPE_INT _tape_index() const {
        return 0;
      }
    };
  }
}
namespace dco {
  enum stce_9925 {
    memory_chunks,
    stce_9926,
    file_io_chunks
  };
  namespace stce_9847 {
    class tape_options {
    private:
      size_t stce_9927;
      DCO_TAPE_INT stce_9928;
      stce_9925 stce_9929;
      bool stce_9930;
      std::string stce_9931;
      int stce_9932;
      int stce_9933;
      FILE *stce_9934;
      DCO_TAPE_INT stce_9935;
    public:
      tape_options() : stce_9927(DCO_CHUNK_SIZE), stce_9928(0),
        stce_9929(memory_chunks), stce_9930(false),
        stce_9931("dco_tape_data.bin"), stce_9932(0),
        stce_9933(-1), stce_9934(NULL), stce_9935(0) {
        stce_9932 = MAP_FILE | MAP_SHARED | MAP_POPULATE;
      }
      inline size_t &chunksize() {
        return stce_9927;
      }
      inline const size_t &chunksize() const {
        return stce_9927;
      }
      inline DCO_TAPE_INT &tapesize() {
        return stce_9935;
      }
      inline const DCO_TAPE_INT &tapesize() const {
        return stce_9935;
      }
      inline int &mmap_flags() {
        return stce_9932;
      }
      inline const int &mmap_flags() const {
        return stce_9932;
      }
      inline DCO_TAPE_INT &number_of_preallocated_chunks() {
        return stce_9928;
      }
      inline const DCO_TAPE_INT &number_of_preallocated_chunks() const {
        return stce_9928;
      }
      inline stce_9925 &chunk_type() {
        return stce_9929;
      }
      inline const stce_9925 &chunk_type() const {
        return stce_9929;
      }
      inline std::string chunk_type_as_string() const {
        if (stce_9929 == memory_chunks) return "memory chunks";
        if (stce_9929 == stce_9926) return "mmap chunks";
        if (stce_9929 == file_io_chunks) return "file io chunks";
        return "unknown chunks";
      }
      inline bool &deallocation_on_reset() {
        return stce_9930;
      }
      inline const bool &deallocation_on_reset() const {
        return stce_9930;
      }
      inline std::string &filename() {
        return stce_9931;
      }
      inline const std::string &filename() const {
        return stce_9931;
      }
      inline FILE *&stce_9936() {
        return stce_9934;
      }
      inline FILE *stce_9936() const {
        return stce_9934;
      }
      inline bool stce_9937() const {
        return (stce_9934 != 0);
      }
      inline int &stce_9938() {
        return stce_9933;
      }
      inline const int &stce_9938() const {
        return stce_9933;
      }
    };
  }
}
namespace dco {
  namespace stce_9847 {
    template <typename stce_9753, class stce_9939> struct stce_9940;
    template <typename stce_9753, class stce_9939> struct stce_9941;
  }
  namespace helper {
    template<typename stce_9942>
    class stce_9943 {
      template<typename stce_9753, typename stce_9939> friend struct dco::stce_9847::stce_9940;
      template<typename stce_9753, typename stce_9939> friend struct dco::stce_9847::stce_9941;
    protected:
      inline virtual ~stce_9943() {
      }
      stce_9942 *stce_9944;
    public:
      inline void stce_9945(stce_9942 *stce_9946) {
        if (stce_9944 != 0) return;
        else stce_9944 = stce_9946;
      }
      inline stce_9942 *get_tape() {
        return stce_9944;
      }
      inline stce_9943() : stce_9944(0) { }
      inline virtual void stce_9947(stce_9830 &stce_9831, DCO_TAPE_INT stce_9839) {
        (void)stce_9831;
        (void)stce_9839;
      }
      inline virtual double get_memory_size() {
        return sizeof(stce_9942);
      }
    };
    template<class stce_9948, class stce_9942>
    class stce_9949 : public stce_9943<stce_9942> {
    private:
      class stce_9950 {
      public:
        virtual ~stce_9950() {};
        virtual double size() = 0;
      };
      template <typename stce_9951>
      class stce_9952 : public stce_9950 {
      public:
        const stce_9951 _data;
        stce_9952(const stce_9951 &stce_9953) : _data(stce_9953) {}
        const stce_9951 &stce_9954() const {
          return _data;
        }
      };
      template <typename stce_9951>
      class stce_9955 : public stce_9952<stce_9951> {
      public:
        stce_9955(stce_9951 data) : stce_9952<stce_9951>(data) {}
        virtual ~stce_9955() { }
        virtual double size() {
          return sizeof(stce_9951);
        }
      };
      template <typename stce_9951>
      class stce_9956 : public stce_9952<stce_9951 *> {
      public:
        const int stce_9957;
        stce_9956(const stce_9951 *data, int stce_9958) : stce_9952<stce_9951 *>(new stce_9951[stce_9958]), stce_9957(stce_9958) {
          for (int stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816)
            this->_data[stce_9816] = data[stce_9816];
        }
        stce_9956(const stce_9951 *data, const int stce_9959, const int stce_9958) : stce_9952<stce_9951 *>(new stce_9951[stce_9958]), stce_9957(stce_9958) {
          for (int stce_9816 = 0, stce_9817 = 0; stce_9816 < stce_9958; ++stce_9816, stce_9817 += stce_9959)
            this->_data[stce_9816] = data[stce_9817];
        }
        virtual ~stce_9956() {
          delete [] this->_data;
        }
        virtual double size() {
          return stce_9957 * sizeof(stce_9951);
        }
      };
      unsigned int stce_9960;
      std::vector<stce_9950 *> stce_9961;
    protected:
      virtual ~stce_9949() {
        for (unsigned int stce_9816 = 0; stce_9816 < stce_9961.size(); stce_9816++)
          delete stce_9961[stce_9816];
        stce_9961.clear();
      }
    public:
      stce_9949(): stce_9943<stce_9942>(), stce_9960(0) {}
      inline virtual double get_memory_size() {
        double stce_9917 = stce_9943<stce_9942>::get_memory_size();
        for (unsigned int stce_9816 = 0; stce_9816 < stce_9961.size(); stce_9816++)
          stce_9917 += stce_9961[stce_9816]->size();
        return stce_9917;
      }
      template<typename stce_9951>
      inline void write_data(const stce_9951 &stce_9962) {
        stce_9961.push_back(new stce_9955<stce_9951>(stce_9962));
      }
      template<typename stce_9951>
      inline void write_data(const stce_9951 *const stce_9962, const int stce_9958) {
        stce_9961.push_back(new stce_9956<stce_9951>(stce_9962, stce_9958));
      }
      template<typename stce_9951>
      inline void write_data(const stce_9951 *const &stce_9962, const int stce_9959, const int stce_9958) {
        stce_9961.push_back(new stce_9956<stce_9951>(stce_9962, stce_9959, stce_9958));
      }
      template<typename stce_9951>
      inline const stce_9951 &read_data() {
        const stce_9951 &stce_9962 = static_cast<stce_9952<stce_9951>* >(stce_9961[stce_9960])->stce_9954();
        ++stce_9960;
        if (static_cast<size_t>(stce_9960) == stce_9961.size()) stce_9960 = 0;
        return stce_9962;
      }
    };
    template<class stce_9948, class stce_9942>
    class stce_9963 : public stce_9949<stce_9948, stce_9942> {
    protected:
      std::vector<DCO_TAPE_INT> stce_9837;
      std::vector<DCO_TAPE_INT> stce_9838;
      DCO_TAPE_INT stce_9964;
      DCO_TAPE_INT stce_9965;
    public:
      inline size_t stce_9966() {
        return stce_9837.size();
      }
      inline size_t stce_9967() {
        return stce_9838.size();
      }
      inline void stce_9947(stce_9830 &stce_9831, DCO_TAPE_INT stce_9839) {
        stce_9831.stce_9836(stce_9837, stce_9838, stce_9839 - static_cast<DCO_TAPE_INT>(stce_9838.size()) - 1);
      }
    public:
      inline void stce_9968(const stce_9948 &stce_9776) {
        if ((stce_9776._data().stce_9912() != 0) && (this->stce_9944 != stce_9776._data().stce_9912()))
          throw dco::exception::create<std::runtime_error>("impossible binding tape - wrong tape in variable!");
      }
    protected:
      ~stce_9963() { }
    public:
      stce_9963(const std::pair<int, int> &stce_9898): stce_9949<stce_9948, stce_9942>(),
        stce_9964(0),
        stce_9965(0) {
        stce_9837.reserve(stce_9898.first);
        stce_9838.reserve(stce_9898.second);
      }
      stce_9963(): stce_9949<stce_9948, stce_9942>(), stce_9964(0), stce_9965(0) {
      }
      inline typename stce_9948::VALUE_TYPE register_input(const stce_9948 &stce_9776) {
        stce_9968(stce_9776);
        stce_9837.push_back(stce_9776._data()._tape_index());
        return stce_9776._value();
      }
      inline void register_input(const stce_9948 *const stce_9776, typename stce_9948::VALUE_TYPE *stce_9969, const int stce_9958) {
        DCO_TAPE_INT stce_9970 = stce_9837.size();
        stce_9837.resize(stce_9970 + stce_9958);
        DCO_TAPE_INT *stce_9971 = &stce_9837[stce_9970];
        int stce_9816;
        for (stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          stce_9968(stce_9776[stce_9816]);
          stce_9971[stce_9816] = stce_9776[stce_9816]._data()._tape_index();
          stce_9969[stce_9816] = stce_9776[stce_9816]._value();
        }
      }
      inline void register_input(const std::vector<stce_9948> &stce_9776, std::vector<typename stce_9948::VALUE_TYPE> &stce_9969) {
        assert(stce_9776.size() == stce_9969.size());
        register_input(&(stce_9776[0]), &(stce_9969[0]), stce_9776.size());
      }
      inline std::vector<typename stce_9948::VALUE_TYPE> register_input(const std::vector<stce_9948> &stce_9776) {
        std::vector<typename stce_9948::VALUE_TYPE> stce_9969(stce_9776.size());
        register_input(stce_9776, stce_9969);
        return stce_9969;
      }
      inline void register_output(stce_9948 *stce_9972, const size_t stce_9958) {
        if (this->stce_9944 == NULL) {
          throw dco::exception::create<std::runtime_error>("impossible binding output - no tape available");
        } else {
          DCO_TAPE_INT stce_9970 = stce_9838.size();
          stce_9838.resize(stce_9970 + stce_9958);
          DCO_TAPE_INT *stce_9973 = &stce_9838[ stce_9970 ];
          size_t stce_9974 = 0;
          typename stce_9942::TAPE_ENTRY *stce_9975 = this->stce_9944->stce_9976(stce_9958, stce_9974);
          for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
            stce_9975[stce_9816].arg = 0;
            typename stce_9948::DATA_TYPE &data = stce_9972[stce_9816]._data();
            data.register_variable(stce_9974 + stce_9816, this->stce_9944);
            stce_9973[stce_9816] = static_cast<DCO_TAPE_INT>(stce_9974 + stce_9816);
          }
        }
      }
      inline void register_output(const typename stce_9948::VALUE_TYPE *const stce_9977, stce_9948 *stce_9972, const size_t stce_9958) {
        if (this->stce_9944 == NULL) {
          throw dco::exception::create<std::runtime_error>("impossible binding output - no tape available");
        } else {
          DCO_TAPE_INT stce_9970 = stce_9838.size();
          stce_9838.resize(stce_9970 + stce_9958);
          DCO_TAPE_INT *stce_9973 = &stce_9838[ stce_9970 ];
          size_t stce_9974 = 0;
          typename stce_9942::TAPE_ENTRY *stce_9975 = this->stce_9944->stce_9976(stce_9958, stce_9974);
          for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
            stce_9975[stce_9816].arg = 0;
            stce_9972[stce_9816] = stce_9977[stce_9816];
            typename stce_9948::DATA_TYPE &data = const_cast<typename stce_9948::DATA_TYPE &>(stce_9972[stce_9816]._data());
            data.register_variable(stce_9974 + stce_9816, this->stce_9944);
            stce_9973[stce_9816] = static_cast<DCO_TAPE_INT>(stce_9974 + stce_9816);
          }
        }
      }
      inline void register_output(const std::vector<typename stce_9948::VALUE_TYPE> &stce_9977, std::vector<stce_9948> &stce_9972) {
        assert(stce_9977.size() == stce_9972.size());
        register_output(&(stce_9977[0]), &(stce_9972[0]), stce_9977.size());
      }
      inline std::vector<stce_9948> register_output(const std::vector<typename stce_9948::VALUE_TYPE> &stce_9977) {
        std::vector<stce_9948> stce_9972(stce_9977.size());
        register_output(stce_9977, stce_9972);
        return stce_9972;
      }
      inline void register_output(std::vector<stce_9948> &stce_9972) {
        register_output(&(stce_9972[0]), stce_9972.size());
      }
      inline stce_9948 register_output(const typename stce_9948::VALUE_TYPE &stce_9978, stce_9942 *tape = NULL) {
        stce_9948 stce_9979;
        if (tape != NULL) {
          if (this->stce_9944 != NULL && this->stce_9944 != tape) {
            throw dco::exception::create<std::runtime_error>("impossible binding output in external function (register_output) - tape of inputs and outputs differ!");
          }
          this->stce_9944 = tape;
        }
        if (this->stce_9944 != NULL) {
          stce_9979 = stce_9978;
          this->stce_9944->register_variable(stce_9979);
        } else
          throw dco::exception::create<std::runtime_error>("impossible binding output in external function - no tape available");
        stce_9838.push_back(stce_9979._data()._tape_index());
        return stce_9979;
      }
      inline typename stce_9948::VALUE_TYPE get_output_adjoint() {
        DCO_TAPE_INT stce_9817 = stce_9965;
        stce_9965++;
        if (static_cast<size_t>(stce_9965) == stce_9838.size())
          stce_9965 = 0;
        typename stce_9948::VALUE_TYPE back = 0;
        back = this->stce_9944->stce_9980(stce_9838[static_cast<size_t>(stce_9817)]);
        return back;
      }
      inline void get_output_adjoint(typename stce_9948::VALUE_TYPE *stce_9981, const size_t stce_9958) {
        DCO_TAPE_INT stce_9817 = stce_9965;
        for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          stce_9981[stce_9816] = this->stce_9944->_adjoint(stce_9838[stce_9817]);
          stce_9817++;
        }
        stce_9965 += stce_9958;
        if (static_cast<size_t>(stce_9965) == stce_9838.size())
          stce_9965 = 0;
      }
      inline void get_output_adjoint(std::vector<typename stce_9948::VALUE_TYPE> &stce_9981) {
        assert(stce_9981.size());
        get_output_adjoint(&(stce_9981[0]), stce_9981.size());
      }
      inline void increment_input_adjoint(const typename stce_9948::VALUE_TYPE *const stce_9982, const int stce_9958) {
        for (int stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          this->stce_9944->_adjoint(stce_9837[stce_9964 + stce_9816]) += stce_9982[stce_9816];
        }
        stce_9964 += stce_9958;
        if (static_cast<size_t>(stce_9964) == stce_9837.size())
          stce_9964 = 0;
      }
      inline void increment_input_adjoint(const std::vector<typename stce_9948::VALUE_TYPE> &stce_9982) {
        assert(stce_9982.size() != 0);
        increment_input_adjoint(&(stce_9982[0]), stce_9982.size());
      }
      inline bool stce_9983() {
        if (stce_9964 == 0) return true;
        else return false;
      }
      inline bool stce_9984() {
        if (stce_9965 == 0) return true;
        else return false;
      }
      inline void increment_input_adjoint(const typename stce_9948::VALUE_TYPE &stce_9982) {
        DCO_TAPE_INT stce_9817 = stce_9964;
        stce_9964++;
        if (static_cast<size_t>(stce_9964) == stce_9837.size())
          stce_9964 = 0;
        this->stce_9944->stce_9980(stce_9837[static_cast<size_t>(stce_9817)]) += stce_9982;
      }
    };
  }
}
namespace dco {
  template< typename stce_9774 > struct stce_9985 {
    typedef stce_9774 stce_9986;
    static inline stce_9986 &value(stce_9774 &value) {
      return value;
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9985 <dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
    typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE stce_9986;
    static inline stce_9986 &value(dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) {
      return value._value();
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9985 <const dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
    typedef const typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE stce_9986;
    static inline stce_9986 &value(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) {
      return value._value();
    }
  };
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9985 <dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > {
    typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE stce_9986;
    static inline stce_9986 &value(dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) {
      return value._value();
    }
  };
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9985 <const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > {
    typedef const typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE stce_9986;
    static inline stce_9986 &value(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) {
      return value._value();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9985 <dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > {
    typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE stce_9986;
    static inline stce_9986 &value(dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) {
      return value._value();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9985 <const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > {
    typedef const typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE stce_9986;
    static inline stce_9986 &value(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) {
      return value._value();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9985 <dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > {
    typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE stce_9986;
    static inline stce_9986 &value(dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) {
      return value._value();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9985 <const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > {
    typedef const typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE stce_9986;
    static inline stce_9986 &value(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) {
      return value._value();
    }
  };
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9985 <dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > {
    typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE stce_9986;
    static inline stce_9986 &value(dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) {
      return value._value();
    }
  };
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9985 <const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > {
    typedef const typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE stce_9986;
    static inline stce_9986 &value(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) {
      return value._value();
    }
  };
  template <typename stce_9774>
  inline typename stce_9985<stce_9774>::stce_9986 &value(stce_9774 &stce_9776) {
    return stce_9985<stce_9774>::value(stce_9776);
  }
  template <typename stce_9774>
  inline typename stce_9985<const stce_9774>::stce_9986 &value(const stce_9774 &stce_9776) {
    return stce_9985<const stce_9774>::value(stce_9776);
  }
  template< typename stce_9774 > struct stce_9987 : stce_9985<stce_9774> {};
  template<class stce_9753, class stce_9877 > struct stce_9987 <dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
    typedef typename stce_9987<typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE>::stce_9986 stce_9986;
    static inline stce_9986 &value(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      return stce_9987<typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE>::value(dco::value(stce_9776));
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9987 <const dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
    typedef const typename stce_9987<typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE>::stce_9986 stce_9986;
    static inline stce_9986 &value(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      return stce_9987<const typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE>::value(dco::value(stce_9776));
    }
  };
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9987 <dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > {
    typedef typename stce_9987<typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE>::stce_9986 stce_9986;
    static inline stce_9986 &value(dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
      return stce_9987<typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776));
    }
  };
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9987 <const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > {
    typedef const typename stce_9987<typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE>::stce_9986 stce_9986;
    static inline stce_9986 &value(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
      return stce_9987<const typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776));
    }
  };
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9987 <dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > {
    typedef typename stce_9987<typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE>::stce_9986 stce_9986;
    static inline stce_9986 &value(dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
      return stce_9987<typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776));
    }
  };
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9987 <const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > {
    typedef const typename stce_9987<typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE>::stce_9986 stce_9986;
    static inline stce_9986 &value(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
      return stce_9987<const typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776));
    }
  };
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9987 <dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > {
    typedef typename stce_9987<typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE>::stce_9986 stce_9986;
    static inline stce_9986 &value(dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
      return stce_9987<typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776));
    }
  };
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9987 <const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > {
    typedef const typename stce_9987<typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE>::stce_9986 stce_9986;
    static inline stce_9986 &value(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
      return stce_9987<const typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776));
    }
  };
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9987 <dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > {
    typedef typename stce_9987<typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE>::stce_9986 stce_9986;
    static inline stce_9986 &value(dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
      return stce_9987<typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776));
    }
  };
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9987 <const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > {
    typedef const typename stce_9987<typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE>::stce_9986 stce_9986;
    static inline stce_9986 &value(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
      return stce_9987<const typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776));
    }
  };
  template <typename stce_9774>
  inline typename stce_9987<stce_9774>::stce_9986 &passive_value(stce_9774 &stce_9776) {
    return stce_9987<stce_9774>::value(stce_9776);
  }
  template <typename stce_9774>
  inline const typename stce_9987<stce_9774>::stce_9986 &passive_value(const stce_9774 &stce_9776) {
    return stce_9987<const stce_9774>::value(stce_9776);
  }
  template< typename stce_9774 > struct stce_9988 {
    typedef stce_9774 stce_9986;
    static inline stce_9986 value(const stce_9774 &stce_9989) {
      (void) stce_9989;
      return stce_9986();
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9988 <dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
    typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9901 &stce_9986;
    static inline stce_9986 value(dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) {
      return value._data().stce_9905();
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9988 <const dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
    typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9901 &stce_9986;
    static inline stce_9986 value(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) {
      return const_cast<stce_9986>(value._data().stce_9905());
    }
  };
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9988 <dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >;
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9988 <const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >;
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9988 <dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >;
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9988 <const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >;
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9988 <dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >;
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9988 <const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >;
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9988 <dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >;
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9988 <const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >;
  template <typename stce_9774>
  inline typename stce_9988<stce_9774>::stce_9986 derivative(stce_9774 &stce_9776) {
    return stce_9988<stce_9774>::value(stce_9776);
  }
  template <typename stce_9774>
  inline typename stce_9988<const stce_9774>::stce_9986 derivative(const stce_9774 &stce_9776) {
    return stce_9988<const stce_9774>::value(stce_9776);
  }
  template <typename stce_9990>
  struct stce_9991 {
    typedef stce_9990 stce_9825;
  };
  template <typename stce_9774>
  struct stce_9991<std::vector<stce_9774> > {
    typedef std::vector<stce_9774> &stce_9825;
  };
  template<class stce_9774, typename stce_9990 = std::vector<stce_9774> >
  struct stce_9992 {
    typename stce_9991<stce_9990>::stce_9825 stce_9993;
    stce_9992(typename stce_9991<stce_9990>::stce_9825 stce_9822) : stce_9993(stce_9822) {}
    stce_9992 &operator = (const std::vector<typename stce_9774::VALUE_TYPE> &stce_9994) {
      for (size_t stce_9816 = 0; stce_9816 < stce_9993.size(); ++stce_9816) {
        dco::derivative(stce_9993[stce_9816]) = stce_9994[stce_9816];
      }
      return *this;
    }
    operator std::vector<typename stce_9774::VALUE_TYPE>() const {
      std::vector<typename stce_9774::VALUE_TYPE> stce_9823;
      for (size_t stce_9816 = 0; stce_9816 < stce_9993.size(); ++stce_9816) {
        stce_9823.push_back(dco::derivative(stce_9993[stce_9816]));
      }
      return stce_9823;
    }
    typename stce_9988<stce_9774>::stce_9986 &operator[](size_t stce_9816) {
      return dco::derivative(stce_9993[stce_9816]);
    }
    const typename stce_9988<stce_9774>::stce_9986 &operator[](size_t stce_9816) const {
      return dco::derivative(stce_9993[stce_9816]);
    }
    size_t size() const {
      return stce_9993.size();
    }
  };
  template<class stce_9774, typename stce_9990 = std::vector<stce_9774> >
  struct stce_9995 {
    typename stce_9991<stce_9990>::stce_9825 stce_9993;
    stce_9995(typename stce_9991<stce_9990>::stce_9825 stce_9822) : stce_9993(stce_9822) { }
    stce_9995 &operator = (const std::vector<typename stce_9774::VALUE_TYPE> &stce_9994) {
      for (size_t stce_9816 = 0; stce_9816 < stce_9993.size(); ++stce_9816) {
        dco::value(stce_9993[stce_9816]) = stce_9994[stce_9816];
      }
      return *this;
    }
    operator std::vector<typename stce_9774::VALUE_TYPE>() const {
      std::vector<typename stce_9774::VALUE_TYPE> stce_9823;
      for (size_t stce_9816 = 0; stce_9816 < stce_9993.size(); ++stce_9816) {
        stce_9823.push_back(dco::value(stce_9993[stce_9816]));
      }
      return stce_9823;
    }
    typename stce_9985<stce_9774>::stce_9986 &operator[](size_t stce_9816) {
      return dco::value(stce_9993[stce_9816]);
    }
    const typename stce_9985<stce_9774>::stce_9986 &operator[](size_t stce_9816) const {
      return dco::value(stce_9993[stce_9816]);
    }
    size_t size() const {
      return stce_9993.size();
    }
  };
  template<class stce_9774>
  struct stce_9996 {
    std::vector<stce_9774> &stce_9993;
    stce_9996(std::vector<stce_9774> &stce_9822) : stce_9993(stce_9822) {}
    stce_9996 &operator = (std::vector<typename stce_9774::VALUE_TYPE> &stce_9994) {
      for (size_t stce_9816 = 0; stce_9816 < stce_9993.size(); ++stce_9816) {
        dco::passive_value(stce_9993[stce_9816]) = stce_9994[stce_9816];
      }
      return *this;
    }
    operator std::vector<typename stce_9774::VALUE_TYPE>() const {
      std::vector<typename stce_9774::VALUE_TYPE> stce_9823;
      for (size_t stce_9816 = 0; stce_9816 < stce_9993.size(); ++stce_9816) {
        stce_9823.push_back(dco::passive_value(stce_9993[stce_9816]));
      }
      return stce_9823;
    }
    typename stce_9987<stce_9774>::stce_9986 &operator[](size_t stce_9816) {
      return dco::passive_value(stce_9993[stce_9816]);
    }
  };
  template<class stce_9774>
  stce_9992<stce_9774> derivative(std::vector<stce_9774> &stce_9822) {
    return stce_9992<stce_9774>(stce_9822);
  }
  template<class stce_9774, class stce_9990>
  stce_9992<typename stce_9774::VALUE_TYPE, stce_9995<stce_9774, stce_9990> > derivative(const stce_9995<stce_9774, stce_9990> &stce_9822) {
    return stce_9992<typename stce_9774::VALUE_TYPE, stce_9995<stce_9774, stce_9990> >(stce_9822);
  }
  template<class stce_9774, class stce_9990>
  stce_9992<typename stce_9774::VALUE_TYPE, stce_9992<stce_9774, stce_9990> > derivative(const stce_9992<stce_9774, stce_9990> &stce_9822) {
    return stce_9992<typename stce_9774::VALUE_TYPE, stce_9992<stce_9774, stce_9990> >(stce_9822);
  }
  template<class stce_9774>
  stce_9995<stce_9774> value(std::vector<stce_9774> &stce_9822) {
    return stce_9995<stce_9774>(stce_9822);
  }
  template<class stce_9774, class stce_9990>
  stce_9995<typename stce_9774::VALUE_TYPE, stce_9995<stce_9774, stce_9990> > value(const stce_9995<stce_9774, stce_9990> &stce_9822) {
    return stce_9995<typename stce_9774::VALUE_TYPE, stce_9995<stce_9774, stce_9990> >(stce_9822);
  }
  template<class stce_9774, class stce_9990>
  stce_9995<typename stce_9774::VALUE_TYPE, stce_9992<stce_9774, stce_9990> > value(const stce_9992<stce_9774, stce_9990> &stce_9822) {
    return stce_9995<typename stce_9774::VALUE_TYPE, stce_9992<stce_9774, stce_9990> >(stce_9822);
  }
  template<class stce_9774>
  stce_9996<stce_9774> passive_value(std::vector<stce_9774> &stce_9822) {
    return stce_9996<stce_9774>(stce_9822);
  }
  template< typename stce_9774 > struct stce_9997 {
    typedef void *stce_9986;
    static inline stce_9986 value(const stce_9774 &stce_9989) {
      (void) stce_9989;
      return static_cast<void *>(0);
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9997 <dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
    typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) {
      return value._data().stce_9912();
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9997 <const dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
    typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) {
      return value._data().stce_9912();
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9997 <std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > > {
    typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > &value) {
      stce_9986 tape = 0;
      for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) {
        if (stce_9997<dco::stce_9847::stce_9864<stce_9753, stce_9877> >::value(value[stce_9816]) != 0) {
          tape = stce_9997<dco::stce_9847::stce_9864<stce_9753, stce_9877> >::value(value[stce_9816]);
          break;
        }
      }
      return tape;
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9997 <const std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > > {
    typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(const std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > &value) {
      stce_9986 tape = 0;
      for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) {
        if (stce_9997<const dco::stce_9847::stce_9864<stce_9753, stce_9877> >::value(value[stce_9816]) != 0) {
          tape = stce_9997<const dco::stce_9847::stce_9864<stce_9753, stce_9877> >::value(value[stce_9816]);
          break;
        }
      }
      return tape;
    }
  };
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9997 <dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > {
    typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) {
      return value._data().stce_9912();
    }
  };
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9997 <const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > {
    typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) {
      return value._data().stce_9912();
    }
  };
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9997 <std::vector<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > > {
    typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(std::vector<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > &value) {
      stce_9986 tape = 0;
      for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) {
        if (stce_9997<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::value(value[stce_9816]) != 0) {
          tape = stce_9997<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::value(value[stce_9816]);
          break;
        }
      }
      return tape;
    }
  };
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9997 <const std::vector<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > > {
    typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(const std::vector<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > &value) {
      stce_9986 tape = 0;
      for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) {
        if (stce_9997<const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::value(value[stce_9816]) != 0) {
          tape = stce_9997<const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::value(value[stce_9816]);
          break;
        }
      }
      return tape;
    }
  };
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9997 <dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > {
    typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) {
      return value._data().stce_9912();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9997 <const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > {
    typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) {
      return value._data().stce_9912();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9997 <std::vector<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > > {
    typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(std::vector<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > &value) {
      stce_9986 tape = 0;
      for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) {
        if (stce_9997<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::value(value[stce_9816]) != 0) {
          tape = stce_9997<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::value(value[stce_9816]);
          break;
        }
      }
      return tape;
    }
  };
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9997 <const std::vector<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > > {
    typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(const std::vector<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > &value) {
      stce_9986 tape = 0;
      for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) {
        if (stce_9997<const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::value(value[stce_9816]) != 0) {
          tape = stce_9997<const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::value(value[stce_9816]);
          break;
        }
      }
      return tape;
    }
  };
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9997 <dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > {
    typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) {
      return value._data().stce_9912();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9997 <const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > {
    typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) {
      return value._data().stce_9912();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9997 <std::vector<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > > {
    typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(std::vector<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > &value) {
      stce_9986 tape = 0;
      for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) {
        if (stce_9997<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::value(value[stce_9816]) != 0) {
          tape = stce_9997<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::value(value[stce_9816]);
          break;
        }
      }
      return tape;
    }
  };
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9997 <const std::vector<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > > {
    typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(const std::vector<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > &value) {
      stce_9986 tape = 0;
      for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) {
        if (stce_9997<const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::value(value[stce_9816]) != 0) {
          tape = stce_9997<const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::value(value[stce_9816]);
          break;
        }
      }
      return tape;
    }
  };
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9997 <dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > {
    typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) {
      return value._data().stce_9912();
    }
  };
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9997 <const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > {
    typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) {
      return value._data().stce_9912();
    }
  };
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9997 <std::vector<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > > {
    typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(std::vector<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > &value) {
      stce_9986 tape = 0;
      for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) {
        if (stce_9997<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::value(value[stce_9816]) != 0) {
          tape = stce_9997<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::value(value[stce_9816]);
          break;
        }
      }
      return tape;
    }
  };
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9997 <const std::vector<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > > {
    typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9910 *stce_9986;
    static inline stce_9986 value(const std::vector<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > &value) {
      stce_9986 tape = 0;
      for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) {
        if (stce_9997<const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::value(value[stce_9816]) != 0) {
          tape = stce_9997<const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::value(value[stce_9816]);
          break;
        }
      }
      return tape;
    }
  };
  template <typename stce_9774>
  inline typename stce_9997<stce_9774>::stce_9986 tape(stce_9774 &stce_9776) {
    return stce_9997<stce_9774>::value(stce_9776);
  }
  template <typename stce_9774>
  inline typename stce_9997<const stce_9774>::stce_9986 tape(const stce_9774 &stce_9776) {
    return stce_9997<const stce_9774>::value(stce_9776);
  }
  template< typename stce_9774 > struct stce_9998 {
    typedef DCO_TAPE_INT stce_9986;
    static inline stce_9986 value(const stce_9774 &stce_9989) {
      (void) stce_9989;
      return 0;
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9998 <dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
    typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9911 stce_9986;
    static inline stce_9986 value(dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) {
      return value._data()._tape_index();
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9998 <const dco::stce_9847::stce_9864<stce_9753, stce_9877> > {
    typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9911 stce_9986;
    static inline stce_9986 value(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) {
      return value._data()._tape_index();
    }
  };
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9998 <dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > {
    typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9911 stce_9986;
    static inline stce_9986 value(dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) {
      return value._data()._tape_index();
    }
  };
  template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9998 <const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > {
    typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9911 stce_9986;
    static inline stce_9986 value(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) {
      return value._data()._tape_index();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9998 <dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > {
    typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9911 stce_9986;
    static inline stce_9986 value(dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) {
      return value._data()._tape_index();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9998 <const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > {
    typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9911 stce_9986;
    static inline stce_9986 value(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) {
      return value._data()._tape_index();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9998 <dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > {
    typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9911 stce_9986;
    static inline stce_9986 value(dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) {
      return value._data()._tape_index();
    }
  };
  template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9998 <const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > {
    typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9911 stce_9986;
    static inline stce_9986 value(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) {
      return value._data()._tape_index();
    }
  };
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9998 <dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > {
    typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9911 stce_9986;
    static inline stce_9986 value(dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) {
      return value._data()._tape_index();
    }
  };
  template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9998 <const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > {
    typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9911 stce_9986;
    static inline stce_9986 value(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) {
      return value._data()._tape_index();
    }
  };
  template <typename stce_9774>
  inline typename stce_9998<stce_9774>::stce_9986 tape_index(stce_9774 &stce_9776) {
    return stce_9998<stce_9774>::value(stce_9776);
  }
  template <typename stce_9774>
  inline typename stce_9998<const stce_9774>::stce_9986 tape_index(const stce_9774 &stce_9776) {
    return stce_9998<const stce_9774>::value(stce_9776);
  }
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9753, class stce_9939 = stce_9753>
    struct stce_9940 {
      struct TAPE_ENTRY {
        DCO_TAPE_INT arg;
        stce_9753 pval;
        TAPE_ENTRY(): arg(0), pval(0) {}
      };
    public:
      struct position_t {
        friend struct stce_9940;
      private:
        size_t stce_9999;
        size_t stce_10000;
        size_t stce_10001;
        position_t(const size_t stce_10002, const size_t stce_10003, const size_t stce_10004) : stce_9999(stce_10002), stce_10000(stce_10003), stce_10001(stce_10004) {}
      public:
        position_t() : stce_9999(0), stce_10000(0), stce_10001(0) {}
        inline const size_t &_stackcounter() const {
          return stce_10000;
        }
        inline const size_t &_progvarcounter() const {
          return stce_10001;
        }
        inline const size_t &_chunknum() const {
          return stce_9999;
        }
        inline bool operator== (const position_t &stce_10005) const {
          if (_chunknum() == stce_10005._chunknum() && _stackcounter() == stce_10005._stackcounter())
            return true;
          else
            return false;
        }
        inline bool operator> (const position_t &stce_10005) const {
          if (_chunknum() == stce_10005._chunknum()) return _stackcounter() > stce_10005._stackcounter();
          else return _chunknum() > stce_10005._chunknum();
        }
        inline bool operator< (const position_t &stce_10005) const {
          if (_chunknum() == stce_10005._chunknum()) return _stackcounter() < stce_10005._stackcounter();
          else return _chunknum() < stce_10005._chunknum();
        }
        template<class stce_10006>
        void stce_10007(stce_10006 &stce_10008) {
          stce_10008.stce_10009 = stce_9999;
          stce_10008.stce_10010 = stce_10000;
          stce_10008.stce_10011 = stce_10001;
        }
      };
      struct interpretation_settings;
    private:
      struct stce_10012 {
        TAPE_ENTRY *stce_9813;
        size_t stce_10013;
        size_t stce_10014;
        stce_10012(size_t stce_10015) : stce_10013(0), stce_10014(stce_10015) {
          stce_9813 = new TAPE_ENTRY[stce_10015];
        }
        ~stce_10012() {
          delete [] stce_9813;
        }
        inline size_t stce_10016() const {
          return stce_10014 - stce_10013;
        }
      };
    private:
      bool stce_10017;
      bool stce_10018;
      std::vector<stce_10012 *> stce_10019;
      stce_10012 *stce_10020;
      size_t stce_10021;
      size_t stce_10022;
      stce_9939 *stce_10023;
      size_t stce_10024;
      size_t _progvarcounter;
      int stce_10025;
      size_t stce_10026;
      stce_9940(size_t stce_10027) : stce_10020(0), stce_10021(0), stce_10022(0), stce_10023(0), _progvarcounter(0), stce_10026(stce_10027), stce_10028(false) {
        stce_10020 = new stce_10012(stce_10026);
        stce_10019.push_back(stce_10020);
        stce_10022 = 1;
        stce_10018 = true;
      }
      inline void stce_10029(const TAPE_ENTRY *start, TAPE_ENTRY *end, size_t &stce_10030, const interpretation_settings &stce_10031) {
        const TAPE_ENTRY *stce_10032 = start;
        stce_9939 *stce_10033 = stce_10023;
        if (stce_10031.stce_10034) {
          while (stce_10032 != end) {
            stce_10032--;
            stce_9939 &stce_9982 = stce_10033[stce_10030];
            --stce_10030;
            const DCO_TAPE_INT &stce_10035 = stce_10032->arg;
            for (DCO_TAPE_INT stce_9816 = 0; stce_9816 < stce_10035; ++stce_9816) {
              stce_10032--;
              stce_10033[stce_10032->arg] += stce_9982 * stce_10032->pval;
            }
            stce_9982 = 0;
          }
        } else {
          while (stce_10032 != end) {
            stce_10032--;
            const stce_9939 &stce_9982 = stce_10033[stce_10030];
            --stce_10030;
            const DCO_TAPE_INT &stce_10035 = stce_10032->arg;
            for (DCO_TAPE_INT stce_9816 = 0; stce_9816 < stce_10035; ++stce_9816) {
              stce_10032--;
              stce_10033[stce_10032->arg] += stce_9982 * stce_10032->pval;
            }
          }
        }
      }
      inline void stce_10036(const position_t &stce_9844, const position_t &stce_9845, const interpretation_settings &stce_10031) {
        (void) "dcoga1s";
        if (stce_10023 == 0) return;
        size_t stce_10030 = stce_9844.stce_10001;
        for (DCO_TAPE_INT stce_9816 = static_cast<DCO_TAPE_INT>(stce_9844.stce_9999); stce_9816 >= static_cast<DCO_TAPE_INT>(stce_9845.stce_9999); --stce_9816) {
          size_t stce_10037 = static_cast<size_t>(stce_9816);
          stce_10012 *stce_10038 = stce_10019[stce_10037];
          TAPE_ENTRY *start = 0;
          TAPE_ENTRY *end = 0;
          if (stce_10037 == stce_9844.stce_9999) {
            start = stce_10038->stce_9813 + stce_9844.stce_10000;
          } else {
            start = stce_10038->stce_9813 + stce_10038->stce_10013;
          }
          if (stce_10037 == stce_9845.stce_9999) {
            end = stce_10038->stce_9813 + stce_9845.stce_10000;
          } else {
            end = stce_10038->stce_9813;
          }
          stce_10029(start, end, stce_10030, stce_10031);
        }
      }
    public:
      inline position_t get_position() const {
        return position_t(stce_10021, stce_10020->stce_10013, _progvarcounter);
      }
      inline double get_tape_memory_size() {
        return (get_position()._progvarcounter() * sizeof(stce_9753) + (stce_10021 * stce_10026 + stce_10020->stce_10013) * sizeof(TAPE_ENTRY)) / 1024.0 / 1024.0;
      }
      inline size_t stce_10039() const {
        return (get_position()._progvarcounter() * sizeof(stce_9753) + (stce_10021 * stce_10026 + stce_10020->stce_10013) * sizeof(TAPE_ENTRY));
      }
      typedef stce_9940<stce_9753, stce_9939> stce_10040;
    public:
      struct interpretation_settings {
        bool reset;
        bool stce_10034;
        interpretation_settings() : reset(false), stce_10034(false) {}
      };
      bool stce_10028;
      class stce_10041 {
      private:
        TAPE_ENTRY *stce_10042;
        const size_t stce_10043;
        size_t stce_10044;
      public:
        stce_10041(TAPE_ENTRY *stce_10045, const size_t stce_10046, stce_10040 *const stce_10047 = 0) :
          stce_10042(stce_10045), stce_10043(stce_10046), stce_10044(0) {
          (void) stce_10047;
        }
        void finalize() {
          while (stce_10044 < stce_10043) {
            stce_10042->arg = 0;
            stce_10042->pval = 0.0;
            stce_10042++;
            stce_10044++;
          }
          stce_10042->arg = static_cast<DCO_TAPE_INT>(stce_10043);
        }
        template <typename stce_9907>
        void put(const stce_9907 &stce_9776, const stce_9939 &stce_10048) {
          stce_10042->arg = stce_9776._data()._tape_index();
          stce_10042->pval = stce_10048;
          stce_10042++;
          stce_10044++;
        }
      };
      class stce_10049 {
      private:
        TAPE_ENTRY *stce_10042;
        const size_t stce_10043;
        size_t stce_10044;
        stce_10040 *const stce_10050;
        template <typename stce_10051>
        inline int stce_10052(const stce_10051 &stce_9776,
                              const stce_9753 &pval,
                              TAPE_ENTRY *&stce_10053) {
          if (stce_9776._data()._tape_index() != 0) {
            stce_10054(stce_9776._data()._tape_index(), pval, stce_10053);
            return 1;
          }
          return 0;
        }
        static inline void stce_10054(const DCO_TAPE_INT &tape_index,
                                      const stce_9753 &pval,
                                      TAPE_ENTRY *&stce_10053) {
          stce_10053->arg = tape_index;
          stce_10053->pval = pval;
          ++stce_10053;
        }
      public:
        stce_10049(TAPE_ENTRY *stce_10045, const size_t stce_10046, stce_10040 *const stce_10047) :
          stce_10042(stce_10045), stce_10043(stce_10046), stce_10044(0), stce_10050(stce_10047) {
          if (stce_10050->stce_10028 == true)
            throw dco::exception::create<std::runtime_error>("this is a non-threadsafe local_gradient type: only one instance at a given point in time possible!");
          stce_10050->stce_10028 = true;
        }
        void finalize() {
          if (stce_10044 > stce_10043)
            throw dco::exception::create<std::runtime_error>("putting to many partials -- please correct upper_bound in constructor.");
          stce_10050->stce_10055(stce_10042);
          stce_10042->arg = static_cast<DCO_TAPE_INT>(stce_10044);
          stce_10050->stce_10028 = false;
        }
        template <typename stce_9907>
        void put(const stce_9907 &stce_9776, const stce_9939 &stce_10048) {
          if (stce_10052(stce_9776, stce_10048, stce_10042)) {
            stce_10044++;
          }
        }
      };
      template<typename stce_10056, typename stce_9907>
      stce_10056 create_local_gradient_object(stce_9907 &stce_10057, const size_t stce_10046 = 0) {
        DCO_TAPE_INT stce_10058;
        TAPE_ENTRY *stce_9823 = this->_get_insert_ptr(stce_10046 + 1, stce_10058);
        stce_10057._data().register_variable(stce_10058, this);
        return stce_10056(stce_9823, stce_10046, this);
      }
    private:
    public:
      typedef dco::helper::stce_9943<stce_10040> stce_10059;
      template <typename stce_10060>
      class stce_10061 {
      public:
        typedef void (*stce_10062)(stce_10040 &stce_10063, const interpretation_settings &stce_10064, stce_10060 *stce_10065);
        typedef void (*stce_10066)(stce_10040 &stce_10063, stce_10060 *stce_10065);
        typedef void (*stce_10067)(stce_10060 *stce_10065);
      };
      class stce_10068 {
      public:
        virtual void stce_10069(stce_10040 &stce_10063, const interpretation_settings &stce_10064, stce_10059 *stce_10065) = 0;
        virtual ~stce_10068() {};
      };
      template <typename stce_10060>
      class stce_10070 : public stce_10068 {
      private:
        union {
          typename stce_10061<stce_10060>::stce_10067 stce_10071;
          typename stce_10061<stce_10060>::stce_10066 stce_10072;
          typename stce_10061<stce_10060>::stce_10062 stce_10073;
        } stce_10071;
        int stce_10074;
      public:
        stce_10070(typename stce_10061<stce_10060>::stce_10067 stce_10075) : stce_10074(0) {
          stce_10071.stce_10071 = stce_10075;
        }
        stce_10070(typename stce_10061<stce_10060>::stce_10066 stce_10075) : stce_10074(1) {
          stce_10071.stce_10072 = stce_10075;
        }
        stce_10070(typename stce_10061<stce_10060>::stce_10062 stce_10075) : stce_10074(2) {
          stce_10071.stce_10073 = stce_10075;
        }
        void stce_10069(stce_10040 &stce_10063, const interpretation_settings &stce_10064, stce_10059 *stce_10065) {
          stce_10060 *stce_10076 = static_cast<stce_10060 *>(stce_10065);
          switch (stce_10074) {
            case 0:
              stce_10071.stce_10071(stce_10076);
              break;
            case 1:
              stce_10071.stce_10072(stce_10063, stce_10076);
              break;
            case 2:
              stce_10071.stce_10073(stce_10063, stce_10064, stce_10076);
              break;
            default:
              throw dco::exception::create<std::runtime_error>("unknown callback to run.");
              break;
          }
        }
        ~stce_10070() {}
      };
      class stce_10077 {
        stce_10059 *stce_10065;
        stce_10068 *stce_10078;
        position_t stce_10079;
      public:
        stce_10077() : stce_10065(0),
          stce_10078(0) { }
        template <typename stce_10060, typename stce_10080>
        void stce_10081(stce_10080 stce_10075) {
          if (stce_10078)
            throw dco::exception::create<std::runtime_error>("currently not supported to insert external_adjoint_object_bases twice.");
          stce_10078 = new stce_10070<stce_10060>(stce_10075);
        }
        stce_10059 *&stce_10082() {
          return stce_10065;
        }
        void stce_10083() {
          delete stce_10065;
          if (stce_10078)
            delete stce_10078;
        }
        position_t &stce_10084() {
          return stce_10079;
        }
        void stce_10069(stce_10040 &stce_10063, const interpretation_settings &stce_10064) {
          if (stce_10078)
            stce_10078->stce_10069(stce_10063, stce_10064, stce_10065);
        }
      };
      std::vector<stce_10077> stce_10085;
      template <class stce_10086, typename FCN_PARAMETERS>
      inline stce_10086 *create_callback_object(const FCN_PARAMETERS &parameters) {
        const stce_9826<FCN_PARAMETERS> stce_10087(parameters);
        stce_10077 stce_10088;
        stce_10085.push_back(stce_10088);
        stce_10085.back().stce_10084() = get_position();
        stce_10086 *stce_10065 = stce_10087.template create<stce_10086>();
        stce_10085.back().stce_10082() = stce_10065;
        stce_10065->stce_9945(this);
        return stce_10065;
      }
      template <class stce_10086>
      inline stce_10086 *create_callback_object() {
        void *stce_10089;
        return create_callback_object<stce_10086>(stce_10089);
      }
      template <class stce_10086, typename stce_10080>
      inline void insert_callback(stce_10080 stce_10078, stce_10086 *stce_10090) {
        if (stce_10085.back().stce_10082() == stce_10090) {
          stce_10085.back().template stce_10081<stce_10086>(stce_10078);
          stce_10085.back().stce_10084() = get_position();
          DCO_TAPE_INT stce_9886 = 0;
          _get_insert_ptr(1, stce_9886)->arg = 0;
        } else {
          throw dco::exception::create<std::runtime_error>("please always insert most recently created external function object.");
        }
      }
    private:
      inline void stce_10091(const position_t &stce_9845) {
        for (int stce_9816 = static_cast<int>(stce_10085.size()) - 1; stce_9816 >= 0; stce_9816--) {
          size_t stce_10037 = static_cast<size_t>(stce_9816);
          if (stce_10085[stce_10037].stce_10084()._progvarcounter() > stce_9845._progvarcounter()) {
            stce_10085[stce_10037].stce_10083();
            stce_10085.pop_back();
          } else {
            break;
          }
        }
      }
    public:
      inline void tape_to_dot(position_t stce_9844 = position_t(), position_t stce_9845 = position_t(), const std::string &filename = "tape.dot") {
        if (stce_9844 == position_t())
          stce_9844 = get_position();
        stce_9830 stce_9831(filename);
        if (stce_9844._progvarcounter() < stce_9845._progvarcounter()) {
          position_t stce_9886 = stce_9844;
          stce_9844 = stce_9845;
          stce_9845 = stce_9886;
        }
        int stce_10092 = -1;
        int stce_10093 = 0;
        for (int stce_9816 = static_cast<int>(stce_10085.size()) - 1; stce_9816 >= 0; --stce_9816) {
          size_t stce_10037 = static_cast<size_t>(stce_9816);
          if ((stce_10085[stce_10037].stce_10084()._progvarcounter() <= stce_9844._progvarcounter()) &&
              (stce_10085[stce_10037].stce_10084()._progvarcounter() >= stce_9845._progvarcounter())) {
            if (stce_10092 == -1) stce_10092 = stce_9816;
            ++stce_10093;
          }
        }
        position_t stce_10094 = stce_9845;
        stce_10095(stce_9844, stce_9845, stce_9831);
        for (int stce_9816 = stce_10092; stce_10093 > 0; --stce_10093) {
          size_t stce_10037 = static_cast<size_t>(stce_9816);
          stce_10094 = stce_10085[stce_10037].stce_10084();
          stce_10085[stce_10037].stce_10082()->stce_9947(stce_9831, static_cast<DCO_TAPE_INT>(stce_10094._progvarcounter() + 1));
          --stce_9816;
        }
      }
    private:
      inline void stce_10096(const position_t &stce_9844, const position_t &stce_9845, const interpretation_settings &stce_10031) {
        if (stce_9844 > get_position())
          throw dco::exception::create<std::runtime_error>("you try to use a tape position outside of the current tape. error.");
        _adjoint(static_cast<DCO_TAPE_INT>(stce_9844._progvarcounter()));
        int stce_10092 = -1;
        int stce_10093 = 0;
        for (int stce_9816 = static_cast<int>(stce_10085.size()) - 1; stce_9816 >= 0; --stce_9816) {
          size_t stce_10037 = static_cast<size_t>(stce_9816);
          if ((stce_10085[stce_10037].stce_10084()._progvarcounter() <= stce_9844._progvarcounter()) &&
              (stce_10085[stce_10037].stce_10084()._progvarcounter() >= stce_9845._progvarcounter())) {
            if (stce_10092 == -1) stce_10092 = stce_9816;
            ++stce_10093;
          }
        }
        position_t stce_10097 = stce_9844;
        position_t stce_10094;
        for (int stce_9816 = stce_10092; stce_10093 > 0; --stce_10093) {
          size_t stce_10037 = static_cast<size_t>(stce_9816);
          stce_10094 = stce_10085[stce_10037].stce_10084();
          stce_10036(stce_10097, stce_10094, stce_10031);
          if (stce_10031.reset) {
            stce_10098(stce_10094);
            DCO_TAPE_INT stce_10099;
            TAPE_ENTRY *stce_10032 = _get_insert_ptr(1, stce_10099);
            (void) stce_10032;
          }
          int stce_9820 = dco::helper::stce_9819<stce_9939>::stce_9820;
          for (int stce_10100 = 0; stce_10100 < stce_9820; stce_10100++) {
            this->stce_10025 = stce_10100;
            stce_10085[stce_10037].stce_10069(*this, stce_10031);
          }
          if (stce_10031.reset) {
            stce_10098(stce_10094);
            stce_10085[stce_10037].stce_10083();
            stce_10085.pop_back();
          }
          stce_10097 = stce_10094;
          --stce_9816;
        }
        stce_10036(stce_10097, stce_9845, stce_10031);
      }
    public:
      inline bool is_active() {
        return stce_10018;
      }
      inline void switch_to_active() {
        DCO_LOG(logINFO) << "tape " << this << " switched to active.";
        if (!stce_10018) stce_10018 = true;
      }
      inline void switch_to_passive() {
        DCO_LOG(logINFO) << "tape " << this << " switched to passive.";
        if (stce_10018) stce_10018 = false;
      }
      template<class stce_9877 >
      inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
        DCO_TAPE_INT stce_10101;
        TAPE_ENTRY *stce_10032 = _get_insert_ptr(1, stce_10101);
        (void) stce_10032;
        stce_10032->arg = 0;
        stce_9877 &data = const_cast<stce_9877 &>(stce_9776._data());
        data.register_variable(stce_10101, this);
      }
      template<class stce_9877 >
      inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, const typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE &stce_9829) {
        stce_9776 = stce_9829;
        register_variable(stce_9776);
      }
      template<class stce_9877 >
      inline void register_variable(std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > &stce_9776) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
          register_variable(stce_9776[stce_9816]);
      }
      template <typename stce_9774, typename stce_9990>
      inline void register_variable(stce_9992<stce_9774, stce_9990> stce_9776) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
          register_variable(stce_9776[stce_9816]);
      }
      template <typename stce_9774, typename stce_9990>
      inline void register_variable(stce_9995<stce_9774, stce_9990> stce_9776) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
          register_variable(stce_9776[stce_9816]);
      }
      template<class stce_9877 >
      inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> *stce_9776, const int stce_9958, const typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE *const stce_9829) {
        if (stce_9958 == 0) return;
        for (int stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816)
          register_variable(stce_9776[stce_9816], stce_9829[stce_9816]);
      }
      template<class stce_9877 >
      inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> *stce_9776, const size_t stce_9958) {
        if (stce_9958 == 0) return;
        for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816)
          register_variable(stce_9776[stce_9816]);
      }
      template<class stce_9877 >
      inline void register_output_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
        stce_9776 = static_cast<dco::stce_9847::stce_9864<stce_9753, stce_9877> >(1.0) * stce_9776;
      }
      template<class stce_9877 >
      inline void register_output_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> *stce_9776, const size_t stce_9958) {
        if (stce_9958 == 0) return;
        for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816)
          stce_9776[stce_9816] = static_cast<dco::stce_9847::stce_9864<stce_9753, stce_9877> >(1.0) * stce_9776[stce_9816];
      }
      template<class stce_9877 >
      inline void register_output_variable(std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > &stce_9776) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
          register_output_variable(stce_9776[stce_9816]);
      }
      template <typename stce_9774, typename stce_9990>
      inline void register_output_variable(stce_9992<stce_9774, stce_9990> stce_9776) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
          register_output_variable(stce_9776[stce_9816]);
      }
      template <typename stce_9774, typename stce_9990>
      inline void register_output_variable(stce_9995<stce_9774, stce_9990> stce_9776) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
          register_output_variable(stce_9776[stce_9816]);
      }
      inline void reset_to(const position_t &stce_9845) {
        stce_10098(stce_9845);
        stce_10091(stce_9845);
      }
      inline void reset() {
        reset_to(position_t());
      }
      inline void interpret_adjoint() {
        position_t stce_9845;
        interpretation_settings stce_10031;
        stce_10096(get_position(), stce_9845, stce_10031);
      }
      inline void interpret_adjoint_to(const position_t &stce_9845) {
        interpretation_settings stce_10031;
        if (stce_9845 > get_position())
          throw dco::exception::create<std::runtime_error>("adjoint interpretation: from < to.", "../build_files//../src/dco//dco_tape_interface_inc.hpp", 241);
        else
          stce_10096(get_position(), stce_9845, stce_10031);
      }
      inline void interpret_adjoint_from(const position_t &stce_9844) {
        position_t stce_9845;
        assert(!(stce_9844 < stce_9845));
        interpretation_settings stce_10031;
        stce_10096(stce_9844, stce_9845, stce_10031);
      }
      inline void interpret_adjoint_from_to(const position_t &stce_9844, const position_t &stce_9845) {
        interpretation_settings stce_10031;
        if (stce_9845 > stce_9844)
          throw dco::exception::create<std::runtime_error>("adjoint interpretation: from < to.", "../build_files//../src/dco//dco_tape_interface_inc.hpp", 264);
        else
          stce_10096(stce_9844, stce_9845, stce_10031);
      }
      inline void interpret_adjoint_and_reset_to(const position_t &stce_9845) {
        position_t stce_9844(get_position());
        interpretation_settings stce_10031;
        stce_10031.reset = true;
        stce_10031.stce_10034 = true;
        stce_10096(stce_9844, stce_9845, stce_10031);
        stce_10098(stce_9845);
        stce_10091(stce_9845);
      }
      inline void interpret_adjoint_and_zero_adjoints_to(const position_t &stce_9845) {
        position_t stce_9844(get_position());
        interpretation_settings stce_10031;
        stce_10031.reset = false;
        stce_10031.stce_10034 = true;
        stce_10096(stce_9844, stce_9845, stce_10031);
      }
      inline void interpret_adjoint_and_zero_adjoints_from_to(const position_t &stce_9844, const position_t &stce_9845) {
        interpretation_settings stce_10031;
        stce_10031.reset = false;
        stce_10031.stce_10034 = true;
        stce_10096(stce_9844, stce_9845, stce_10031);
      }
      inline void zero_adjoints() {
        position_t stce_9845;
        stce_10102(get_position(), stce_9845);
      }
      inline void zero_adjoints_to(const position_t &stce_9845) {
        stce_10102(get_position(), stce_9845);
      }
      inline void zero_adjoints_from(const position_t &stce_9844) {
        position_t stce_9845;
        stce_10102(stce_9844, stce_9845);
      }
      inline void zero_adjoints_from_to(const position_t &stce_9844, const position_t &stce_9845) {
        stce_10102(stce_9844, stce_9845);
      }
      struct stce_10103 {
      protected:
        template<class stce_9877 >
        static inline int stce_10104(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
          return stce_9776._data().stce_10105();
        }
        template<class stce_9871, class stce_9872, class stce_9873 >
        static inline int stce_10104(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
          return stce_10104(stce_9776.stce_9856) + stce_10104(stce_9776.stce_9857);
        }
        template<class stce_9876, class stce_9873 >
        static inline int stce_10104(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
          return stce_10104(stce_9776.stce_9852);
        }
        template<class stce_9871, class stce_9873 >
        static inline int stce_10104(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
          return stce_10104(stce_9776.stce_9856);
        }
        template<class stce_9872, class stce_9873 >
        static inline int stce_10104(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
          return stce_10104(stce_9776.stce_9857);
        }
        template<class stce_9877 >
        static inline int stce_10106(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, stce_10040 *&tape) {
          if (tape == 0)
            tape = stce_9776._data().stce_9912();
          else {
            if (stce_9776._data().stce_9912() != NULL && stce_9776._data().stce_9912() != tape) {
              throw dco::exception::create<std::runtime_error>("multiple tape error: different tapes on right-hand side of statement", "../build_files//../src/dco//dco_tape_helper_inc.hpp", 38);
            }
          }
          return stce_9776._data().stce_10105();
        }
        template<class stce_9871, class stce_9872, class stce_9873 >
        static inline int stce_10106(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, stce_10040 *&tape) {
          return stce_10106(stce_9776.stce_9856, tape) + stce_10106(stce_9776.stce_9857, tape);
        }
        template<class stce_9876, class stce_9873 >
        static inline int stce_10106(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, stce_10040 *&tape) {
          return stce_10106(stce_9776.stce_9852, tape);
        }
        template<class stce_9871, class stce_9873 >
        static inline int stce_10106(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, stce_10040 *&tape) {
          return stce_10106(stce_9776.stce_9856, tape);
        }
        template<class stce_9872, class stce_9873 >
        static inline int stce_10106(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, stce_10040 *&tape) {
          return stce_10106(stce_9776.stce_9857, tape);
        }
        struct stce_10107 {
          TAPE_ENTRY *stce_10108;
          template<class stce_9906>
          stce_10107(TAPE_ENTRY *stce_10053, const int stce_10035, stce_9906 stce_9870) : stce_10108(stce_10053) {
            stce_10109(stce_9870, 1.0);
            stce_10108->arg = stce_10035;
          }
          template<class stce_9877 >
          inline void stce_10109(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, const stce_9753 &pval) {
            if (stce_9776._data()._tape_index() != 0) {
              stce_10108->arg = stce_9776._data()._tape_index();
              stce_10108->pval = pval;
              ++stce_10108;
            }
          }
          template<class stce_9871, class stce_9872, class stce_9873 >
          inline void stce_10109(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval) {
            this->stce_10109(stce_9776.stce_9856, stce_9776.stce_9858()*pval);
            this->stce_10109(stce_9776.stce_9857, stce_9776.stce_9859()*pval);
          }
          template<class stce_9876, class stce_9873 >
          inline void stce_10109(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, const stce_9753 &pval) {
            this->stce_10109(stce_9776.stce_9852, stce_9776.pval() * pval);
          }
          template<class stce_9871, class stce_9873 >
          inline void stce_10109(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, const stce_9753 &pval) {
            this->stce_10109(stce_9776.stce_9856, stce_9776.stce_9858()*pval);
          }
          template<class stce_9872, class stce_9873 >
          inline void stce_10109(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval) {
            this->stce_10109(stce_9776.stce_9857, stce_9776.stce_9859()*pval);
          }
        };
      };
      template<stce_10040 *&global_tape>
      struct stce_10110 : stce_10103 {
        typedef stce_10040 stce_9910;
        typedef const DCO_TAPE_INT &stce_9911;
        typedef stce_9939 stce_9901;
        DCO_TAPE_INT stce_10111;
      public:
        stce_10110() : stce_10111(0) {}
        inline void clear() {
          stce_10111 = 0;
        }
        inline const stce_9939 &stce_9905() const {
          return _adjoint();
        }
        inline stce_9939 &stce_9905() {
          return _adjoint();
        }
        inline stce_9939 &_adjoint() const {
          return global_tape->_adjoint(stce_10111);
        }
        inline void stce_9903(const stce_9939 &stce_9829) const {
          global_tape->_adjoint(stce_10111) = stce_9829;
        }
        inline bool _is_registered() const {
          return stce_10111 == 0 ? false : true;
        }
        inline DCO_TAPE_INT &_tape_index() {
          return stce_10111;
        }
        inline const DCO_TAPE_INT &_tape_index() const {
          return stce_10111;
        }
        inline int stce_10105() const {
          return stce_10111 == 0 ? 0 : 1;
        }
        inline void register_variable(DCO_TAPE_INT stce_10101 , stce_10040 *tape) {
          (void) tape;
          stce_10111 = stce_10101;
        }
        template<class stce_9906, class stce_9907>
        static inline void stce_9875(const stce_9906 &stce_9870, stce_9907 &stce_9908) {
          unsigned short stce_10035 = static_cast<unsigned short>(stce_10103::stce_10104(stce_9870));
          if (stce_10035 > 0) {
            if (NULL != global_tape && !global_tape->is_active()) {
              stce_10110 &data = const_cast<stce_10110 &>(stce_9908._data());
              data.clear();
              return;
            }
            DCO_TAPE_INT stce_10112;
            typename stce_10040::TAPE_ENTRY *stce_10053 = global_tape->_get_insert_ptr(stce_10035 + 1, stce_10112);
            (void) stce_10053;
            if (stce_10053 != 0) {
              typename stce_10103::stce_10107 stce_9886(stce_10053, stce_10035, stce_9870);
            }
            stce_10110 &data = const_cast<stce_10110 &>(stce_9908._data());
            data.stce_10111 = stce_10112;
          } else {
            stce_10110 &data = const_cast<stce_10110 &>(stce_9908._data());
            data.clear();
          }
        }
        static inline stce_10040 *stce_9912() {
          return global_tape;
        }
        inline void stce_10113(stce_10040 *stce_9774) {
          (void) stce_9774;
        }
      };
      struct stce_10114 : stce_10103 {
        typedef stce_10040 stce_9910;
        typedef const DCO_TAPE_INT &stce_9911;
        typedef stce_9939 stce_9901;
        DCO_TAPE_INT stce_10111;
        stce_10040 *stce_10115;
      public:
        stce_10114() : stce_10111(0), stce_10115(0) {}
        inline void clear() {
          stce_10111 = 0;
          stce_10115 = 0;
        }
        inline const stce_9939 &stce_9905() const {
          return _adjoint();
        }
        inline stce_9939 &stce_9905() {
          return _adjoint();
        }
        inline stce_9939 &_adjoint() const {
          static stce_9939 stce_10089 = 0;
          if (stce_10115 == 0)
            return stce_10089;
          else
            return stce_10115->_adjoint(stce_10111);
        }
        inline void stce_9903(const stce_9939 &stce_9829) const {
          if (stce_10115 != 0)
            stce_10115->_adjoint(stce_10111) = stce_9829;
        }
        inline bool _is_registered() const {
          return stce_10111 == 0 ? false : true;
        }
        inline DCO_TAPE_INT &_tape_index() {
          return stce_10111;
        }
        inline const DCO_TAPE_INT &_tape_index() const {
          return stce_10111;
        }
        inline int stce_10105() const {
          return stce_10111 == 0 ? 0 : 1;
        }
        inline void register_variable(DCO_TAPE_INT stce_10101 , stce_10040 *tape) {
          (void) tape;
          stce_10111 = stce_10101;
          stce_10115 = tape;
        }
        inline stce_10040 *stce_9912() const {
          return stce_10115;
        }
        inline void stce_10113(stce_10040 *stce_9774) {
          stce_10115 = stce_9774;
        }
        template<class stce_9906, class stce_9907>
        static inline void stce_9875(const stce_9906 &stce_9870, stce_9907 &stce_9908) {
          stce_10040 *stce_10047 = 0;
          unsigned short stce_10035 = static_cast<unsigned short>(stce_10103::stce_10106(stce_9870, stce_10047));
          if (NULL != stce_10047 && stce_10035 > 0) {
            if (NULL != stce_10047 && !stce_10047->is_active()) {
              stce_10114 &data = const_cast<stce_10114 &>(stce_9908._data());
              data.clear();
              return;
            }
            DCO_TAPE_INT stce_10112;
            typename stce_10040::TAPE_ENTRY *stce_10053 = stce_10047->_get_insert_ptr(stce_10035 + 1, stce_10112);
            if (stce_10053 != 0) {
              typename stce_10103::stce_10107 stce_9886(stce_10053, stce_10035, stce_9870);
            }
            stce_10114 &data = const_cast<stce_10114 &>(stce_9908._data());
            data.stce_10111 = stce_10112;
            data.stce_10115 = stce_10047;
          } else {
            stce_10114 &data = const_cast<stce_10114 &>(stce_9908._data());
            data.clear();
          }
        }
      };
      void stce_10095(position_t stce_9844, position_t stce_9845, stce_9830 &stce_9831) {
        (void)stce_9844;
        (void)stce_9845;
        (void)stce_9831;
        DCO_LOG(dco::logINFO) << "Writing chunk tape to dot from " << stce_9844._progvarcounter() << " to " << stce_9845._progvarcounter();
        if (stce_9844._progvarcounter() < stce_9845._progvarcounter()) {
          position_t stce_9886 = stce_9844;
          stce_9844 = stce_9845;
          stce_9845 = stce_9886;
        }
        DCO_TAPE_INT stce_10030 = static_cast<DCO_TAPE_INT>(stce_9844._progvarcounter());
        for (DCO_TAPE_INT stce_9816 = static_cast<DCO_TAPE_INT>(stce_9844._chunknum()); stce_9816 >= static_cast<DCO_TAPE_INT>(stce_9845._chunknum()); --stce_9816) {
          size_t stce_10037 = static_cast<size_t>(stce_9816);
          stce_10012 *stce_10038 = stce_10019[stce_10037];
          TAPE_ENTRY *start = 0;
          TAPE_ENTRY *end = 0;
          if (stce_10037 == stce_9844._chunknum()) start = stce_10038->stce_9813 + stce_9844._stackcounter();
          else start = stce_10038->stce_9813 + stce_10038->stce_10013;
          if (stce_10037 == stce_9845._chunknum()) end = stce_10038->stce_9813 + stce_9845._stackcounter();
          else end = stce_10038->stce_9813;
          TAPE_ENTRY *stce_10032 = start;
          while (stce_10032 != end) {
            stce_10032--;
            if (stce_10023 != 0) stce_9831.stce_9840(stce_10030, stce_10023[stce_10030]);
            else stce_9831.stce_9840(stce_10030);
            DCO_TAPE_INT stce_10116 = stce_10030;
            --stce_10030;
            const DCO_TAPE_INT &stce_10035 = stce_10032->arg;
            for (DCO_TAPE_INT stce_10117 = 0; stce_10117 < stce_10035; ++stce_10117) {
              stce_10032--;
              DCO_TAPE_INT stce_10118 = stce_10032->arg;
              stce_9753 stce_10119 = stce_10032->pval;
              stce_9831.stce_9843(stce_10118, stce_10116, stce_10119);
            }
          }
        }
      }
      inline stce_9939 &_adjoint(const DCO_TAPE_INT tape_index) {
        if (stce_10023 == 0) {
          stce_10024 = _progvarcounter;
          stce_10023 = new stce_9939[stce_10024 + 1];
          for (size_t stce_9816 = 0; stce_9816 <= stce_10024; ++stce_9816)
            stce_10023[stce_9816] = 0;
        } else {
          if (_progvarcounter > stce_10024) {
            stce_9939 *stce_10120 = new stce_9939[_progvarcounter + 1];
            for (size_t stce_9816 = 0; stce_9816 <= stce_10024; ++stce_9816)
              stce_10120[stce_9816] = stce_10023[stce_9816];
            for (size_t stce_9816 = stce_10024 + 1; stce_9816 <= _progvarcounter; ++stce_9816) {
              stce_10120[stce_9816] = 0;
            }
            delete [] stce_10023;
            stce_10023 = stce_10120;
            stce_10024 = _progvarcounter;
          }
        }
        return stce_10023[tape_index];
      }
      inline stce_9753 &stce_9980(const DCO_TAPE_INT tape_index) {
        stce_9939 &stce_9982 = _adjoint(tape_index);
        stce_9753 *stce_10121;
        stce_10121 = reinterpret_cast<stce_9753 *>(&stce_9982);
        return stce_10121[stce_10025];
      }
      static inline stce_9940 *create(const size_t size, const int stce_10001 = 0, size_t stce_10014 = DCO_CHUNK_SIZE) {
        (void)size;
        (void)stce_10001;
        stce_9940 *stce_9823 = new stce_9940(stce_10014);
        size_t stce_10122 = size / (stce_10014);
        for (size_t stce_9816 = 0; stce_9816 < stce_10122; ++stce_9816) {
          stce_10012 *stce_9886 = new stce_10012(stce_10014);
          for (size_t stce_10123 = 0; stce_10123 < stce_10014; ++stce_10123) {
            stce_9886->stce_9813[stce_9816].pval = 0;
          }
          stce_9823->stce_10019.push_back(stce_9886);
          stce_9823->stce_10022++;
        }
        return stce_9823;
      }
      static inline stce_9940 *create(tape_options stce_10124 = tape_options()) {
        return create(static_cast<size_t>(stce_10124.tapesize()), 0, stce_10124.chunksize());
      }
      static inline stce_9940 *create(const std::string &stce_10125, const std::string &filename = "dco_tape_sizes.dco") {
        (void)stce_10125;
        (void)filename;
        return new stce_9940(DCO_CHUNK_SIZE);
      }
      static inline void remove(stce_9940 *&tape) {
        tape->reset();
        if (tape->stce_10023 != 0) delete [] tape->stce_10023;
        for (DCO_TAPE_INT stce_9816 = static_cast<DCO_TAPE_INT>(tape->stce_10019.size()) - 1; stce_9816 >= 0; --stce_9816) {
          delete tape->stce_10019[static_cast<size_t>(stce_9816)];
        }
        tape->stce_10018 = false;
        tape->stce_10017 = true;
        delete tape;
        tape = 0;
      }
      inline void stce_10102(const position_t &stce_9844, const position_t &stce_9845) {
        if (stce_10023 == 0) return;
        size_t stce_10126 = stce_9844.stce_10001;
        if (stce_10126 > stce_10024) stce_10126 = stce_10024;
        size_t stce_10127 = stce_9845.stce_10001;
        if (stce_10127 > stce_10024) stce_10127 = stce_10024;
        for (size_t stce_9816 = stce_10126; stce_9816 > stce_10127; --stce_9816) {
          stce_10023[stce_9816] = 0;
        }
      }
      inline void stce_10055(const TAPE_ENTRY *end) {
        stce_10020->stce_10013 = static_cast<size_t>(end - stce_10020->stce_9813 + 1);
      }
      inline TAPE_ENTRY *_get_insert_ptr(const size_t stce_10128, DCO_TAPE_INT &stce_10101) {
        if ((stce_10128) > (stce_10020->stce_10016())) {
          ++stce_10021;
          if (stce_10021 < stce_10022) {
            stce_10020 = stce_10019[static_cast<size_t>(stce_10021)];
            stce_10020->stce_10013 = 0;
          } else {
            stce_10020 = new stce_10012(stce_10026);
            stce_10019.push_back(stce_10020);
            ++stce_10022;
          }
          stce_10019.reserve(static_cast<size_t>(stce_10021));
          stce_10020 = stce_10019[static_cast<size_t>(stce_10021)];
        }
        TAPE_ENTRY *stce_9823 = stce_10020->stce_9813 + stce_10020->stce_10013;
        stce_10020->stce_10013 += stce_10128;
        _progvarcounter++;
        stce_10101 = static_cast<DCO_TAPE_INT>(_progvarcounter);
        return stce_9823;
      }
      inline TAPE_ENTRY *stce_9976(const size_t stce_10128, DCO_TAPE_INT &stce_10101) {
        if (stce_10128 > stce_10020->stce_10016()) {
          ++stce_10021;
          if (stce_10021 < stce_10022) {
            stce_10020 = stce_10019[stce_10021];
            stce_10020->stce_10013 = 0;
          } else {
            stce_10020 = new stce_10012(stce_10026);
            stce_10019.push_back(stce_10020);
            ++stce_10022;
          }
          stce_10019.reserve(stce_10021);
          stce_10020 = stce_10019[stce_10021];
        }
        TAPE_ENTRY *stce_9823 = stce_10020->stce_9813 + stce_10020->stce_10013;
        stce_10020->stce_10013 += stce_10128;
        stce_10101 = _progvarcounter + 1;
        _progvarcounter += stce_10128;
        return stce_9823;
      }
      inline void stce_10098(const position_t &stce_9845) {
        stce_10102(get_position(), stce_9845);
        stce_10020 = stce_10019[static_cast<size_t>(stce_9845.stce_9999)];
        stce_10021 = stce_9845.stce_9999;
        stce_10020->stce_10013 = static_cast<size_t>(stce_9845.stce_10000);
        _progvarcounter = stce_9845.stce_10001;
      }
    };
  }
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9753>
    struct stce_10129 {
    private:
      struct stce_10130 {
        int stce_10035;
        int stce_10131;
      };
      stce_10130 *stce_10132;
      DCO_TAPE_INT stce_10133;
      int *stce_10134;
      DCO_TAPE_INT stce_10135;
      stce_10129(const stce_10129<stce_9753> &stce_10136) {
        (void) stce_10136;
        throw dco::exception::create<std::runtime_error>("dco_error: Not implemented yet! Please report, why needed!", "../build_files//../src/dco//dco_tape_blob_pattern.hpp", 31);
      }
      stce_10129(DCO_TAPE_INT stce_10035, DCO_TAPE_INT stce_10001) {
        stce_10132 = new stce_10130[stce_10001];
        stce_10133 = 0;
        stce_10134 = new int[stce_10035];
        stce_10135 = 0;
      }
    public:
      struct stce_10137 {
        friend struct stce_10129<stce_9753>;
      private:
        DCO_TAPE_INT stce_10138;
        DCO_TAPE_INT stce_10139;
        inline stce_10137(DCO_TAPE_INT stce_10140, DCO_TAPE_INT stce_10141) : stce_10138(stce_10140), stce_10139(stce_10141) {}
      public:
        inline stce_10137() : stce_10138(0), stce_10139(0) {};
        DCO_TAPE_INT stce_10142() {
          return stce_10138;
        }
        DCO_TAPE_INT stce_10143() {
          if (stce_10139 < 0) return -stce_10139;
          return stce_10139;
        }
        bool stce_10144() {
          return stce_10139 < 0;
        }
      };
      struct position_t {
      private:
        DCO_TAPE_INT _progvarcounter;
      public:
        inline DCO_TAPE_INT stce_10001() const {
          return _progvarcounter;
        }
        inline position_t(const DCO_TAPE_INT stce_10145) : _progvarcounter(stce_10145) {}
      };
      inline position_t get_position() {
        return position_t(stce_10133);
      }
      typedef std::vector<stce_10137> stce_10146;
      template<class stce_9774>
      inline stce_10146 *stce_10147(stce_9774 *stce_10142, int stce_9958, const position_t &stce_10148) {
        stce_10146 *stce_9823 = new stce_10146();
        for (DCO_TAPE_INT stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          stce_10149(stce_9816 + 1, stce_10142[stce_9816]._data().tape_index, stce_10148, stce_9823);
        }
        return stce_9823;
      }
      inline void stce_10150(stce_10146 *stce_10151, std::string filename) {
        std::ofstream out(filename.c_str());
        for (size_t stce_9816 = 0; stce_9816 < stce_10151->size(); ++stce_9816) {
          stce_10137 &stce_10152 = (*stce_10151)[stce_9816];
          out << stce_10152.stce_10142() << " " << stce_10152.stce_10143() << " 1" << std::endl;
        }
        out.close();
      }
      inline void stce_10153(std::string filename) {
        std::ofstream out(filename.c_str());
        out << "digraph {" << std::endl;
        for (DCO_TAPE_INT stce_9816 = 1; stce_9816 <= stce_10133; ++stce_9816) {
          out << stce_9816 << std::endl;
        }
        for (DCO_TAPE_INT stce_9816 = 1; stce_9816 <= stce_10133; ++stce_9816) {
          int stce_10035 = stce_10132[stce_9816].stce_10035;
          int stce_10037 = stce_10132[stce_9816].stce_10131;
          for (int stce_10123 = 0; stce_10123 < stce_10035; ++stce_10123) {
            int stce_9908 = stce_10134[stce_10123 + stce_10037];
            out << stce_9816 << " -> " << stce_9908 << std::endl;
          }
        }
        out << "}" << std::endl;
        out.close();
      }
      inline void stce_10149(DCO_TAPE_INT stce_10140, DCO_TAPE_INT stce_9839, const position_t &stce_10148, stce_10146 *stce_10154) {
        if (stce_9839 == 0) return;
        if (stce_9839 <= stce_10148.stce_10001()) {
          stce_10154->push_back(stce_10137(stce_10140, stce_9839));
        } else {
          int stce_10035 = stce_10132[stce_9839].stce_10035;
          int stce_10037 = stce_10132[stce_9839].stce_10131;
          for (int stce_9816 = 0; stce_9816 < stce_10035; ++stce_9816) {
            stce_10149(stce_10140, stce_10134[stce_9816 + stce_10037], stce_10148, stce_10154);
          }
        }
      }
      static inline stce_10129 *create(DCO_TAPE_INT size, DCO_TAPE_INT stce_10155 = 0) {
        if (stce_10155 == 0) stce_10155 = size / 2;
        return new stce_10129(size, stce_10155);
      }
      template<class stce_9877 >
      inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_10156) {
        stce_9877 &data = const_cast<stce_9877 &>(stce_10156._data());
        stce_10133++;
        data.tape_index = stce_10133;
      }
      template<stce_10129 *&global_tape>
      struct stce_10157 {
        DCO_TAPE_INT tape_index;
        stce_10157() : tape_index(0) {}
        inline void clear() {
          tape_index = 0;
        }
        template<class stce_9877 >
        static inline void stce_10109(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, bool stce_10144) {
          (void) stce_10144;
          global_tape->stce_10134[global_tape->stce_10135] = stce_9776._data().tape_index;
          global_tape->stce_10135++;
        }
        template<class stce_9871, class stce_9872, class stce_9873 >
        static inline void stce_10109(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, bool stce_10144) {
          stce_10109(stce_9776.stce_9856, stce_10144);
          stce_10109(stce_9776.stce_9857, stce_10144);
        }
        template<class stce_9876, class stce_9873 >
        static inline void stce_10109(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, bool stce_10144) {
          stce_10109(stce_9776.stce_9852, stce_10144);
        }
        template<class stce_9871, class stce_9873 >
        static inline void stce_10109(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, bool stce_10144) {
          stce_10109(stce_9776.stce_9856, stce_10144);
        }
        template<class stce_9872, class stce_9873 >
        static inline void stce_10109(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, bool stce_10144) {
          stce_10109(stce_9776.stce_9857, stce_10144);
        }
        template<class stce_9906, class stce_9907>
        static inline void stce_9875(const stce_9906 &stce_9994, stce_9907 &stce_10158) {
          const int stce_10131 = global_tape->stce_10135;
          stce_10109(stce_9994, false);
          stce_10157 &data = const_cast<stce_10157 &>(stce_10158._data());
          if (stce_10131 == global_tape->stce_10135) {
            data.clear();
          } else {
            global_tape->stce_10133++;
            data.tape_index = global_tape->stce_10133;
            global_tape->stce_10132[global_tape->stce_10133].stce_10035 = global_tape->stce_10135 - stce_10131;
            global_tape->stce_10132[global_tape->stce_10133].stce_10131 = stce_10131;
          }
        }
      };
    };
  }
}
namespace dco {
}
namespace dco {
  template <class stce_10159>
  class stce_10160 {
  public:
    typedef stce_10159 value_t;
    typedef void derivative_t;
    typedef void tape_t;
    typedef void local_gradient_t;
    typedef void local_gradient_with_activity_t;
    typedef void external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    static const bool is_dco_type = false;
    static const bool is_adjoint_type = false;
    static const bool is_tangent_type = false;
  };
  template <class stce_9774>
  class gt1s {
  public:
    typedef stce_9774 derivative_t;
    typedef dco::stce_9847::stce_9900<derivative_t> _data;
    typedef dco::stce_9847::stce_9864<stce_9774, _data> type;
    typedef stce_9774 value_t;
    typedef void tape_t;
    typedef void local_gradient_t;
    typedef void local_gradient_with_activity_t;
    typedef void external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    static const bool is_dco_type = true;
    static const bool is_adjoint_type = false;
    static const bool is_tangent_type = true;
    static inline void get(const type &stce_9776, stce_9774 &stce_9829, int stce_10161 = 0) {
      (void) "dcogt1s";
      if (stce_10161 == 0)
        stce_9829 = stce_9776._value();
      else if (stce_10161 == 1) {
        stce_9776._data().stce_9904(stce_9829);
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of tangent-linear index in get");
      }
    }
    static inline void set(type &stce_9776, const stce_9774 &stce_9829, int stce_10161 = 0) {
      (void) "dcogt1s";
      if (stce_10161 == 0) {
        stce_9774 &value = const_cast<stce_9774 &>(stce_9776._value());
        value = stce_9829;
      } else if (stce_10161 == 1) {
        stce_9776._data().stce_9903(stce_9829);
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of tangent-linear index in set");
      }
    }
    static inline void get(const type *stce_9776, stce_9774 *stce_10162, const size_t stce_9958, const int what = 0) {
      (void) "dcogt1s";
      if (what == 0) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          stce_10162[stce_9816] = stce_9776[stce_9816]._value();
        }
      } else if (what == 1) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          stce_9776[stce_9816]._data().stce_9904(stce_10162[stce_9816]);
        }
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of tangent-linear index in get");
      }
    }
    static inline void get(const std::vector<type> &stce_9776, std::vector<stce_9774> &stce_10162, const int what = 0) {
      stce_10162.resize(stce_9776.size());
      get(&(stce_9776[0]), &(stce_10162[0]), stce_9776.size(), what);
    }
    static inline void set(type *stce_9776, const stce_9774 *stce_9869, const size_t stce_9958, const int what = 0) {
      (void) "dcogt1s";
      if (what == 0) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          stce_9774 &value = const_cast<stce_9774 &>(stce_9776[stce_9816]._value());
          value = stce_9869[stce_9816];
        }
      } else if (what == 1) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          stce_9776[stce_9816]._data().stce_9903(stce_9869[stce_9816]);
        }
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of tangent-linear index in set");
      }
    }
    static inline void set(std::vector<type> &stce_9776, const std::vector<stce_9774> &stce_9869, const int what = 0) {
      if (stce_9776.size() != stce_9869.size()) {
        throw dco::exception::create<std::invalid_argument>("vector sizes do not match in gt1s::set()");
      }
      (void) "dcogt1s";
      set(&(stce_9776[0]), &(stce_9869[0]), stce_9776.size(), what);
    }
  };
  template <class stce_9774, typename stce_9901, bool stce_10163> class stce_10164 {
  public:
    typedef dco::stce_9847::stce_9921<stce_9774, stce_9901> _data;
  };
  template <class stce_9774, typename stce_9901> class stce_10164<stce_9774, stce_9901, false> {
  public:
    typedef dco::stce_9847::stce_9919<stce_9774, stce_9901> _data;
  };
  template <class stce_9774, int stce_10165 = DCO_T1V_SIZE, bool stce_10163 = false>
  class gt1v {
  public:
    typedef dco::helper::stce_9811<stce_9774, stce_10165> derivative_t;
    typedef typename stce_10164<stce_9774, derivative_t, stce_10163>::_data _data;
    typedef dco::stce_9847::stce_9864<stce_9774, _data> type;
    typedef stce_9774 value_t;
    typedef void tape_t;
    typedef dco::stce_9847::tape_options tape_options_t;
    typedef void local_gradient_t;
    typedef void local_gradient_with_activity_t;
    typedef void external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    static const bool is_dco_type = true;
    static const bool is_adjoint_type = false;
    static const bool is_tangent_type = true;
    static inline void get(const type &stce_9776, stce_9774 &stce_9829, int stce_10161 = 0, int stce_9817 = 0) {
      (void) "dcogt1v";
      if (stce_10161 == 0) stce_9829 = stce_9776._value();
      else if (stce_10161 == 1) {
        stce_9776._data().stce_9904(stce_9829, stce_9817);
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of tangent-linear vector mode index in get");
      }
    }
    static inline void set(type &stce_9776, const stce_9774 &stce_9829, int stce_10161 = 0, int stce_9817 = 0) {
      (void) "dcogt1v";
      if (stce_10161 == 0) {
        stce_9774 &value = const_cast<stce_9774 &>(stce_9776._value());
        value = stce_9829;
      } else if (stce_10161 == 1) {
        _data &stce_10166 = const_cast<_data &>(stce_9776._data());
        stce_10166.stce_9903(stce_9829, stce_9817);
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of tangent-linear vector mode index in set");
      }
    }
  };
  template <class stce_9774, const int stce_9820 = DCO_T1V_SIZE>
  class ga1v {
  public:
    typedef dco::helper::stce_9811<stce_9774, stce_9820> derivative_t;
    typedef dco::stce_9847::stce_9940<stce_9774, derivative_t> tape_t;
    static tape_t *global_tape;
    typedef typename dco::ga1v<stce_9774, stce_9820>::tape_t::template stce_10110<global_tape> _data;
    typedef dco::stce_9847::stce_9864<stce_9774, _data> type;
    typedef typename tape_t::stce_10041 local_gradient_t;
    typedef typename tape_t::stce_10049 local_gradient_with_activity_t;
    typedef dco::stce_9847::tape_options tape_options_t;
    typedef dco::helper::stce_9943<tape_t> stce_10059;
    typedef dco::helper::stce_9949<type, tape_t> stce_10167;
    typedef dco::helper::stce_9963<type, tape_t> external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    typedef stce_9774 value_t;
    static const bool is_dco_type = true;
    static const bool is_adjoint_type = true;
    static const bool is_tangent_type = false;
  public:
    static inline void get(const type &stce_9776, stce_9774 &stce_9829, int stce_10161 = 0, int stce_9817 = 0) {
      if (stce_10161 == -1) {
        _data &stce_10166 = const_cast<_data &>(stce_9776._data());
        stce_9829 = stce_10166._adjoint()[stce_9817];
      } else if (stce_10161 == 0) {
        stce_9829 = stce_9776._value();
      } else
        throw dco::exception::create<std::runtime_error>("wrong component requested.");
    }
    static inline void set(type &stce_9776, const stce_9774 &stce_9829, int stce_10161 = 0, int stce_9817 = 0) {
      if (stce_10161 == -1) {
        _data &stce_10166 = const_cast<_data &>(stce_9776._data());
        stce_10166._adjoint()[stce_9817] = stce_9829;
      } else if (stce_10161 == 0) {
        stce_9774 &stce_10168 = const_cast<stce_9774 &>(stce_9776._value());
        stce_10168 = stce_9829;
      } else
        throw dco::exception::create<std::runtime_error>("wrong component requested.");
    }
  };
  template <typename stce_9774, const int stce_9820> typename ga1v<stce_9774, stce_9820>::tape_t *ga1v<stce_9774, stce_9820>::global_tape;
  template <class stce_9774>
  class ga1s {
  public:
    typedef stce_9774 derivative_t;
    typedef dco::stce_9847::stce_9940<derivative_t> tape_t;
    static tape_t *global_tape;
    typedef typename tape_t::template stce_10110<global_tape> _data;
    typedef dco::stce_9847::stce_9864<stce_9774, _data> type;
    typedef typename tape_t::stce_10041 local_gradient_t;
    typedef typename tape_t::stce_10049 local_gradient_with_activity_t;
    typedef dco::stce_9847::tape_options tape_options_t;
    typedef dco::helper::stce_9943<tape_t> stce_10059;
    typedef dco::helper::stce_9949<type, tape_t> stce_10167;
    typedef dco::helper::stce_9963<type, tape_t> external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    typedef stce_9774 value_t;
    static const bool is_dco_type = true;
    static const bool is_adjoint_type = true;
    static const bool is_tangent_type = false;
    static inline void get(const type &stce_9776, stce_9774 &stce_9829, int stce_10161 = 0) {
      (void) "dcoga1s";
      if (stce_10161 == 0)
        stce_9829 = stce_9776._value();
      else if (stce_10161 == -1) {
        if (stce_9776._data()._is_registered()) {
          stce_9774 &value = stce_9776._data()._adjoint();
          stce_9829 = value;
        } else
          stce_9829 = 0;
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of adjoint index in get.");
      }
    }
    static inline void get(const type *stce_9776, stce_9774 *stce_10162, const size_t stce_10169, const int what = 0) {
      (void) "dcoga1s";
      if (what == 0) {
        for (size_t stce_9816 = 0; stce_9816 < stce_10169; ++stce_9816) {
          stce_10162[stce_9816] = stce_9776[stce_9816]._value();
        }
      } else if (what == -1) {
        for (size_t stce_9816 = 0; stce_9816 < stce_10169; ++stce_9816) {
          stce_9774 &value = stce_9776[stce_9816]._data()._adjoint();
          stce_10162[stce_9816] = value;
        }
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of adjoint index in get.");
      }
    }
    static inline void get(const std::vector<type> &stce_9776, std::vector<stce_9774> &stce_10162, const int what = 0) {
      stce_10162.resize(stce_9776.size());
      get(&(stce_9776[0]), &(stce_10162[0]), stce_9776.size(), what);
    }
    static inline void set(type &stce_9776, const stce_9774 stce_9829, int stce_10161 = 0) {
      (void) "dcoga1s";
      if (stce_10161 == 0) {
        stce_9774 &value = const_cast<stce_9774 &>(stce_9776._value());
        value = stce_9829;
      } else if (stce_10161 == -1) {
        if (stce_9776._data()._is_registered()) {
          stce_9774 &value = stce_9776._data()._adjoint();
          value = stce_9829;
        }
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of adjoint index in set.");
      }
    }
    static inline void set(type *stce_9776, const stce_9774 *stce_9869, const size_t stce_10169, const int what = 0) {
      (void) "dcoga1s";
      if (what == 0) {
        for (size_t stce_9816 = 0; stce_9816 < stce_10169; ++stce_9816) {
          stce_9774 &value = const_cast<stce_9774 &>(stce_9776[stce_9816]._value());
          value = stce_9869[stce_9816];
        }
      } else if (what == -1) {
        for (size_t stce_9816 = 0; stce_9816 < stce_10169; ++stce_9816) {
          if (stce_9776[stce_9816]._data()._is_registered()) {
            stce_9774 &value = stce_9776[stce_9816]._data()._adjoint();
            value = stce_9869[stce_9816];
          }
        }
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of adjoint index in set.");
      }
    }
    static inline void set(std::vector<type> &stce_9776, const std::vector<stce_9774> &stce_9869, const int what = 0) {
      (void) "dcoga1s";
      if (stce_9776.size() != stce_9869.size()) {
        throw dco::exception::create<std::invalid_argument>("vector sizes do not match in set()");
      }
      set(&(stce_9776[0]), &(stce_9869[0]), stce_9776.size(), what);
    }
  };
  template <typename stce_9774> typename ga1s<stce_9774>::tape_t *ga1s<stce_9774>::global_tape;
  template <class stce_9774>
  class ga1sm {
  public:
    typedef stce_9774 derivative_t;
    typedef dco::stce_9847::stce_9940<derivative_t> tape_t;
    typedef typename tape_t::stce_10114 _data;
    typedef dco::stce_9847::stce_9864<stce_9774, _data> type;
    typedef typename tape_t::stce_10041 local_gradient_t;
    typedef typename tape_t::stce_10049 local_gradient_with_activity_t;
    typedef dco::stce_9847::tape_options tape_options_t;
    typedef dco::helper::stce_9943<tape_t> stce_10059;
    typedef dco::helper::stce_9949<type, tape_t> stce_10167;
    typedef dco::helper::stce_9963<type, tape_t> external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    typedef stce_9774 value_t;
    static const bool is_dco_type = true;
    static const bool is_adjoint_type = true;
    static const bool is_tangent_type = false;
    static inline void get(const type &stce_9776, stce_9774 &stce_9829, int stce_10161 = 0) {
      (void) "dcoga1sm";
      if (stce_10161 == 0)
        stce_9829 = stce_9776._value();
      else if (stce_10161 == -1) {
        if (stce_9776._data()._is_registered()) {
          stce_9774 &value = stce_9776._data()._adjoint();
          stce_9829 = value;
        } else
          stce_9829 = 0;
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of adjoint index in get.");
      }
    }
    static inline void get(const type *stce_9776, stce_9774 *stce_10162, const size_t stce_9958, const int what = 0) {
      (void) "dcoga1sm";
      if (what == 0) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          stce_10162[stce_9816] = stce_9776[stce_9816]._value();
        }
      } else if (what == -1) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          stce_10162[stce_9816] = stce_9776[stce_9816]._data()._adjoint();
        }
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of adjoint index in get.");
      }
    }
    static inline void get(const std::vector<type> &stce_9776, std::vector<stce_9774> &stce_10162, const int what = 0) {
      stce_10162.resize(stce_9776.size());
      get(&(stce_9776[0]), &(stce_10162[0]), stce_9776.size(), what);
    }
    static inline void set(type &stce_9776, const stce_9774 stce_9829, int stce_10161 = 0) {
      (void) "dcoga1sm";
      if (stce_10161 == 0) {
        stce_9774 &value = const_cast<stce_9774 &>(stce_9776._value());
        value = stce_9829;
      } else if (stce_10161 == -1) {
        if (stce_9776._data()._is_registered()) {
          stce_9774 &value = stce_9776._data()._adjoint();
          value = stce_9829;
        }
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of adjoint index in set.");
      }
    }
    static inline void set(type *stce_9776, const stce_9774 *stce_9869, const size_t stce_9958, const int what = 0) {
      (void) "dcoga1sm";
      if (what == 0) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          stce_9774 &value = const_cast<stce_9774 &>(stce_9776[stce_9816]._value());
          value = stce_9869[stce_9816];
        }
      } else if (what == -1) {
        for (size_t stce_9816 = 0; stce_9816 < stce_9958; ++stce_9816) {
          if (stce_9776[stce_9816]._data()._is_registered()) {
            stce_9774 &value = stce_9776[stce_9816]._data()._adjoint();
            value = stce_9869[stce_9816];
          }
        }
      } else {
        throw dco::exception::create<std::invalid_argument>("invalid kind of adjoint index in set.");
      }
    }
    static inline void set(std::vector<type> &stce_9776, const std::vector<stce_9774> &stce_9869, const int what = 0) {
      (void) "dcoga1sm";
      if (stce_9776.size() != stce_9869.size()) {
        throw dco::exception::create<std::invalid_argument>("vector sizes do not match in set()");
      }
      set(&(stce_9776[0]), &(stce_9869[0]), stce_9776.size(), what);
    }
  };
}
namespace dco {
  template<typename tape_t>
  static size_t size_of(const tape_t *tape) {
    return tape->stce_10039();
  }
  template <class stce_10170>
  struct mode : public dco::stce_10160<stce_10170> { };
  template <typename stce_9753>
  struct mode<dco::stce_9847::stce_9864<stce_9753, typename dco::gt1s<stce_9753>::_data> > : public dco::gt1s<stce_9753> {};
  template <typename stce_9753, int stce_10165>
  struct mode<dco::stce_9847::stce_9864<stce_9753, dco::stce_9847::stce_9919<stce_9753, dco::helper::stce_9811<stce_9753, stce_10165> > > > : public dco::gt1v<stce_9753, stce_10165, false> {};
  template <typename stce_9753, int stce_10165>
  struct mode<dco::stce_9847::stce_9864<stce_9753, dco::stce_9847::stce_9921<stce_9753, dco::helper::stce_9811<stce_9753, stce_10165> > > > : public dco::gt1v<stce_9753, stce_10165, true> {};
  template <typename stce_9753>
  struct mode<dco::stce_9847::stce_9864<stce_9753, typename dco::ga1s<stce_9753>::_data> > : public dco::ga1s<stce_9753> {};
  template <typename stce_9753>
  struct mode<dco::stce_9847::stce_9864<stce_9753, typename dco::ga1v<stce_9753>::_data> > : public dco::ga1v<stce_9753> {};
  template <typename stce_9753>
  struct mode<dco::stce_9847::stce_9864<stce_9753, typename dco::ga1sm<stce_9753>::_data> > : public dco::ga1sm<stce_9753> {};
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

#endif // DCO_HPP
